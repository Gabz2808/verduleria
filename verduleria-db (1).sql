--------------------------------------------------------
--  File created - Monday-April-14-2025   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence COMPRAS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "USER_JAVA"."COMPRAS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Sequence DETALLE_COMPRAS_SEQ
--------------------------------------------------------cha

   CREATE SEQUENCE  "USER_JAVA"."DETALLE_COMPRAS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;
--------------------------------------------------------
--  DDL for Table ALERTAS
--------------------------------------------------------

CREATE TABLE "USER_JAVA"."ALERTAS" 
(
   "ID_ALERTA" NUMBER GENERATED BY DEFAULT AS IDENTITY 
      MINVALUE 1 MAXVALUE 9999999999999999999999999999 
      INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE NOKEEP NOSCALE, 

   "TIPO" VARCHAR2(100 BYTE) NOT NULL, 
   "MENSAJE" VARCHAR2(255 BYTE) NOT NULL, 
   "FECHA" DATE DEFAULT SYSDATE NOT NULL,

   CONSTRAINT pk_alertas PRIMARY KEY ("ID_ALERTA"),
   CONSTRAINT chk_tipo_alerta CHECK ("TIPO" IN ('ERROR', 'ADVERTENCIA', 'INFORMACION'))
) 
SEGMENT CREATION DEFERRED 
PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
NOCOMPRESS LOGGING
TABLESPACE "USERS";

--------------------------------------------------------
--  DDL for Table AUDITORIA_DETALLE_COMPRAS
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."AUDITORIA_DETALLE_COMPRAS" 
   (	"ID_AUDITORIA" NUMBER, 
	"ID_DETALLE_COMPRA" NUMBER, 
	"OPERACION" VARCHAR2(10 BYTE), 
	"CANTIDAD_ANTERIOR" NUMBER, 
	"PRECIO_UNITARIO_ANTERIOR" NUMBER(10,2), 
	"CANTIDAD_ACTUAL" NUMBER, 
	"PRECIO_UNITARIO_ACTUAL" NUMBER(10,2), 
	"FECHA" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CALIDAD
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."CALIDAD" 
   (	"ID_CALIDAD" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"DESCRIPCION" VARCHAR2(255 BYTE), 
	"ID_PRODUCTO" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CATEGORIAS
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."CATEGORIAS" 
   (	"ID_CATEGORIA" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NOMBRE" VARCHAR2(100 BYTE), 
	"DESCRIPCION" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table CLIENTES
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."CLIENTES" 
   (	"ID_CLIENTE" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NOMBRE" VARCHAR2(150 BYTE), 
	"CONTACTO" VARCHAR2(100 BYTE), 
	"DIRECCION" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table COMPRAS
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."COMPRAS" 
   (	"ID_COMPRA" NUMBER, 
	"ID_PROVEEDOR" NUMBER, 
	"FECHA_COMPRA" DATE DEFAULT SYSDATE, 
	"TOTAL" NUMBER(10,2) DEFAULT 0, 
	"ID_ESTADO" NUMBER DEFAULT 1
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "USER_JAVA"."COMPRAS"."ID_COMPRA" IS 'Identificador único para cada orden de compra.';
   COMMENT ON COLUMN "USER_JAVA"."COMPRAS"."ID_PROVEEDOR" IS 'Clave foránea que referencia al proveedor relacionado con la compra.';
   COMMENT ON COLUMN "USER_JAVA"."COMPRAS"."FECHA_COMPRA" IS 'Fecha en la que se crea la orden de compra, por defecto la fecha actual.';
   COMMENT ON COLUMN "USER_JAVA"."COMPRAS"."TOTAL" IS 'Monto total de la compra.';
   COMMENT ON COLUMN "USER_JAVA"."COMPRAS"."ID_ESTADO" IS 'Referencia al estado de la orden (pendiente, completada, cancelada, etc.).';
   COMMENT ON TABLE "USER_JAVA"."COMPRAS"  IS 'Tabla que almacena las órdenes de compras realizadas a los proveedores.';
--------------------------------------------------------
--  DDL for Table DETALLE_COMPRAS
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."DETALLE_COMPRAS" 
   (	"ID_DETALLE_COMPRA" NUMBER, 
	"ID_COMPRA" NUMBER, 
	"ID_PRODUCTO" NUMBER, 
	"CANTIDAD" NUMBER, 
	"PRECIO_UNITARIO" NUMBER(10,2)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table DETALLE_VENTAS
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."DETALLE_VENTAS" 
   (	"ID_DETALLE_VENTA" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ID_VENTA" NUMBER, 
	"ID_PRODUCTO" NUMBER, 
	"CANTIDAD" NUMBER, 
	"PRECIO_UNITARIO" NUMBER(10,2)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table DEVOLUCIONES
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."DEVOLUCIONES" 
   (	"ID_DEVOLUCION" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ID_PRODUCTO" NUMBER, 
	"ID_ORDEN" NUMBER, 
	"ID_CLIENTE" NUMBER, 
	"MOTIVO" VARCHAR2(255 BYTE), 
	"CANTIDAD" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ESTADOS_ORDEN
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."ESTADOS_ORDEN" 
   (	"ID_ESTADO" NUMBER, 
	"NOMBRE_ESTADO" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;

   COMMENT ON TABLE "USER_JAVA"."ESTADOS_ORDEN"  IS 'Lista de estados válidos para las órdenes de compra';
--------------------------------------------------------
--  DDL for Table ESTADOS_ORDENES
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."ESTADOS_ORDENES" 
   (	"ID_ESTADO" NUMBER, 
	"NOMBRE_ESTADO" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table GASTOS
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."GASTOS" 
   (	"ID_GASTO" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"DESCRIPCION" VARCHAR2(255 BYTE), 
	"MONTO" NUMBER(10,2), 
	"FECHA" DATE DEFAULT SYSDATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table HISTORIAL_PRECIOS
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."HISTORIAL_PRECIOS" 
   (	"ID_HISTORIAL" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ID_PRODUCTO" NUMBER, 
	"PRECIO_ANTERIOR" NUMBER(10,2), 
	"PRECIO_NUEVO" NUMBER(10,2), 
	"FECHA_CAMBIO" DATE DEFAULT SYSDATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table HISTORIAL_STOCK
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."HISTORIAL_STOCK" 
   (	"ID_HISTORIAL" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ID_PRODUCTO" NUMBER, 
	"CANTIDAD_ANTERIOR" NUMBER, 
	"CANTIDAD_NUEVA" NUMBER, 
	"FECHA_CAMBIO" DATE DEFAULT SYSDATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table INVENTARIO
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."INVENTARIO" 
   (	"ID_INVENTARIO" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"STOCK" NUMBER, 
	"UBICACION" VARCHAR2(100 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table LOGS
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."LOGS" 
   (	"ID_LOG" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ID_USUARIO" NUMBER, 
	"ACCION" VARCHAR2(255 BYTE), 
	"FECHA" DATE DEFAULT SYSDATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PAGOS
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."PAGOS" 
   (	"ID_PAGO" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ID_VENTA" NUMBER, 
	"METODO_PAGO" VARCHAR2(50 BYTE), 
	"MONTO" NUMBER(10,2)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PRODUCTOS
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."PRODUCTOS" 
   (	"ID_PRODUCTO" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NOMBRE" VARCHAR2(100 BYTE), 
	"ID_CATEGORIA" NUMBER, 
	"ID_UNIDAD" NUMBER, 
	"ID_PROVEEDOR" NUMBER, 
	"ID_INVENTARIO" NUMBER
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PROMOCIONES
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."PROMOCIONES" 
   (	"ID_PROMOCION" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ID_PRODUCTO" NUMBER, 
	"DESCUENTO" NUMBER(5,2), 
	"FECHA_INICIO" DATE, 
	"FECHA_FIN" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PROVEEDORES
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."PROVEEDORES" 
   (	"ID_PROVEEDOR" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NOMBRE" VARCHAR2(150 BYTE), 
	"CONTACTO" VARCHAR2(100 BYTE), 
	"DIRECCION" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table REPORTES
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."REPORTES" 
   (	"ID_REPORTE" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"TIPO" VARCHAR2(100 BYTE), 
	"FECHA_GENERADO" DATE DEFAULT SYSDATE, 
	"DESCRIPCION" VARCHAR2(255 BYTE)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ROLES
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."ROLES" 
   (	"ID_ROL" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NOMBRE" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table UNIDADES
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."UNIDADES" 
   (	"ID_UNIDAD" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NOMBRE" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table USUARIOS
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."USUARIOS" 
   (	"ID_USUARIO" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"NOMBRE" VARCHAR2(100 BYTE), 
	"CORREO" VARCHAR2(100 BYTE), 
	"CONTRASENA" RAW(32), 
	"ID_ROL" NUMBER DEFAULT 1, 
	"FECHA_CREACION" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table VENTAS
--------------------------------------------------------

  CREATE TABLE "USER_JAVA"."VENTAS" 
   (	"ID_VENTA" NUMBER GENERATED BY DEFAULT AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
	"ID_CLIENTE" NUMBER, 
	"FECHA_VENTA" DATE DEFAULT SYSDATE, 
	"TOTAL" NUMBER(10,2)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for View VISTA_INVENTARIO_COMPLETO
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "USER_JAVA"."VISTA_INVENTARIO_COMPLETO" ("ID_PRODUCTO", "NOMBRE_PRODUCTO", "NOMBRE_CATEGORIA", "STOCK", "UBICACION") AS 
  SELECT 
    p.ID_PRODUCTO,
    p.NOMBRE AS NOMBRE_PRODUCTO,
    c.NOMBRE AS NOMBRE_CATEGORIA,
    s.cantidad_nueva as stock,
    i.UBICACION
FROM 
    PRODUCTOS p
INNER JOIN 
    CATEGORIAS c ON p.ID_CATEGORIA = c.ID_CATEGORIA
LEFT JOIN 
    historial_stock s ON s.id_producto = p.ID_PRODUCTO
LEFT JOIN 
    INVENTARIO i ON i.id_inventario = p.id_inventario
;
--------------------------------------------------------
--  DDL for View VW_COMPRAS_POR_PROVEEDOR
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "USER_JAVA"."VW_COMPRAS_POR_PROVEEDOR" ("PROVEEDOR", "NUMERO_COMPRAS", "TOTAL_GASTADO") AS 
  SELECT 
    PR.NOMBRE AS PROVEEDOR, 
    COUNT(DISTINCT C.ID_COMPRA) AS NUMERO_COMPRAS,
    SUM(DC.CANTIDAD * DC.PRECIO_UNITARIO) AS TOTAL_GASTADO
FROM 
    DETALLE_COMPRAS DC
JOIN 
    COMPRAS C ON DC.ID_COMPRA = C.ID_COMPRA
JOIN 
    PROVEEDORES PR ON C.ID_PROVEEDOR = PR.ID_PROVEEDOR
GROUP BY 
    PR.NOMBRE
ORDER BY 
    TOTAL_GASTADO DESC
;
--------------------------------------------------------
--  DDL for View VW_DETALLE_COMPLETO_COMPRAS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "USER_JAVA"."VW_DETALLE_COMPLETO_COMPRAS" ("ID_COMPRA", "FECHA_COMPRA", "PROVEEDOR", "PRODUCTO", "CANTIDAD", "PRECIO_UNITARIO", "SUBTOTAL", "TOTAL_COMPRA") AS 
  SELECT
    C.ID_COMPRA,
    C.FECHA_COMPRA,
    PR.NOMBRE AS PROVEEDOR,
    P.NOMBRE AS PRODUCTO,
    DC.CANTIDAD,
    DC.PRECIO_UNITARIO,
    (DC.CANTIDAD * DC.PRECIO_UNITARIO) AS SUBTOTAL,
    C.TOTAL AS TOTAL_COMPRA
FROM 
    DETALLE_COMPRAS DC
JOIN 
    COMPRAS C ON DC.ID_COMPRA = C.ID_COMPRA
JOIN 
    PRODUCTOS P ON DC.ID_PRODUCTO = P.ID_PRODUCTO
JOIN
    PROVEEDORES PR ON C.ID_PROVEEDOR = PR.ID_PROVEEDOR
;
--------------------------------------------------------
--  DDL for View VW_DETALLE_COMPRAS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "USER_JAVA"."VW_DETALLE_COMPRAS" ("ID_COMPRA", "FECHA_COMPRA", "PRODUCTO", "CANTIDAD", "PRECIO_UNITARIO", "SUBTOTAL", "TOTAL_COMPRA") AS 
  SELECT 
    C.ID_COMPRA,
    C.FECHA_COMPRA,
    P.NOMBRE AS PRODUCTO,
    DC.CANTIDAD,
    DC.PRECIO_UNITARIO,
    (DC.CANTIDAD * DC.PRECIO_UNITARIO) AS SUBTOTAL,
    C.TOTAL AS TOTAL_COMPRA
FROM 
    DETALLE_COMPRAS DC
JOIN 
    COMPRAS C ON DC.ID_COMPRA = C.ID_COMPRA
JOIN 
    PRODUCTOS P ON DC.ID_PRODUCTO = P.ID_PRODUCTO
;
--------------------------------------------------------
--  DDL for View VW_PRODUCTOS_MAS_COMPRADOS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "USER_JAVA"."VW_PRODUCTOS_MAS_COMPRADOS" ("PRODUCTO", "TOTAL_CANTIDAD", "TOTAL_VENDIDO") AS 
  SELECT 
    P.NOMBRE AS PRODUCTO, 
    SUM(DC.CANTIDAD) AS TOTAL_CANTIDAD,
    SUM(DC.CANTIDAD * DC.PRECIO_UNITARIO) AS TOTAL_VENDIDO
FROM 
    DETALLE_COMPRAS DC
JOIN 
    PRODUCTOS P ON DC.ID_PRODUCTO = P.ID_PRODUCTO
JOIN 
    COMPRAS C ON DC.ID_COMPRA = C.ID_COMPRA
GROUP BY 
    P.NOMBRE
ORDER BY 
    TOTAL_CANTIDAD DESC
;
--------------------------------------------------------
--  DDL for View VW_RESUMEN_COMPRAS_POR_FECHA
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "USER_JAVA"."VW_RESUMEN_COMPRAS_POR_FECHA" ("FECHA_COMPRA", "TOTAL_DEL_DIA") AS 
  SELECT 
    C.FECHA_COMPRA, 
    SUM(DC.CANTIDAD * DC.PRECIO_UNITARIO) AS TOTAL_DEL_DIA
FROM 
    DETALLE_COMPRAS DC
JOIN 
    COMPRAS C ON DC.ID_COMPRA = C.ID_COMPRA
GROUP BY 
    C.FECHA_COMPRA
ORDER BY 
    C.FECHA_COMPRA
;
--------------------------------------------------------
--  DDL for View VW_RESUMEN_VENTAS_POR_PRODUCTO
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "USER_JAVA"."VW_RESUMEN_VENTAS_POR_PRODUCTO" ("PRODUCTO", "TOTAL_CANTIDAD", "TOTAL_VENDIDO") AS 
  SELECT 
    P.NOMBRE AS PRODUCTO, 
    SUM(DV.CANTIDAD) AS TOTAL_CANTIDAD,
    SUM(DV.CANTIDAD * DV.PRECIO_UNITARIO) AS TOTAL_VENDIDO
FROM 
    DETALLE_VENTAS DV
JOIN 
    PRODUCTOS P ON DV.ID_PRODUCTO = P.ID_PRODUCTO
GROUP BY 
    P.NOMBRE
ORDER BY 
    TOTAL_VENDIDO DESC
;
--------------------------------------------------------
--  DDL for View V_ALERTAS_RECIENTES
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "USER_JAVA"."V_ALERTAS_RECIENTES" ("ID_ALERTA", "TIPO", "MENSAJE", "FECHA") AS 
  SELECT * FROM ALERTAS
ORDER BY FECHA DESC
FETCH FIRST 10 ROWS ONLY
;
--------------------------------------------------------
--  DDL for View V_CLIENTES_COMPRAS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "USER_JAVA"."V_CLIENTES_COMPRAS" ("ID_VENTA", "ID_CLIENTE", "NOMBRE", "CONTACTO", "DIRECCION", "FECHA_VENTA", "TOTAL") AS 
  SELECT 
    ve.id_venta,
    cl."ID_CLIENTE",cl."NOMBRE",cl."CONTACTO",cl."DIRECCION",
    ve.fecha_venta,
    ve.total
FROM CLIENTES cl
LEFT JOIN VENTAS ve ON cl.id_cliente = ve.id_cliente
;
--------------------------------------------------------
--  DDL for View V_COMPRAS_DETALLES
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "USER_JAVA"."V_COMPRAS_DETALLES" ("ID_COMPRA", "ID_PROVEEDOR", "FECHA_COMPRA", "TOTAL", "ID_PRODUCTO", "CANTIDAD", "PRECIO_UNITARIO") AS 
  SELECT C.ID_COMPRA, C.ID_PROVEEDOR, C.FECHA_COMPRA, C.TOTAL, DC.ID_PRODUCTO, DC.CANTIDAD, DC.PRECIO_UNITARIO
FROM "USER_JAVA"."COMPRAS" C
JOIN "USER_JAVA"."DETALLE_COMPRAS" DC ON C.ID_COMPRA = DC.ID_COMPRA
;
--------------------------------------------------------
--  DDL for View V_DEVOLUCIONES_DETALLES
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "USER_JAVA"."V_DEVOLUCIONES_DETALLES" ("ID_DEVOLUCION", "ID_PRODUCTO", "ID_ORDEN", "ID_CLIENTE", "MOTIVO", "CANTIDAD") AS 
  SELECT D.ID_DEVOLUCION, D.ID_PRODUCTO, D.ID_ORDEN, D.ID_CLIENTE, D.MOTIVO, D.CANTIDAD
FROM "USER_JAVA"."DEVOLUCIONES" D
;
--------------------------------------------------------
--  DDL for View V_GASTOS_GENERALES
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "USER_JAVA"."V_GASTOS_GENERALES" ("DESCRIPCION", "MONTO", "FECHA") AS 
  SELECT g.DESCRIPCION, g.MONTO, g.FECHA
FROM USER_JAVA.GASTOS g
;
--------------------------------------------------------
--  DDL for View V_HISTORIAL_PRECIOS_POR_PRODUCTO
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "USER_JAVA"."V_HISTORIAL_PRECIOS_POR_PRODUCTO" ("ID_HISTORIAL", "ID_PRODUCTO", "NOMBRE_PRODUCTO", "PRECIO_ANTERIOR", "PRECIO_NUEVO", "FECHA_CAMBIO") AS 
  SELECT 
    hp.id_historial,
    p.id_producto,
    p.nombre AS nombre_producto,
    hp.precio_anterior,
    hp.precio_nuevo,
    hp.fecha_cambio
FROM historial_precios hp
LEFT JOIN productos p ON p.id_producto = hp.id_producto
;
--------------------------------------------------------
--  DDL for View V_INVENTARIO_PRODUCTOS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "USER_JAVA"."V_INVENTARIO_PRODUCTOS" ("ID_INVENTARIO", "ID_PRODUCTO", "STOCK", "NOMBRE") AS 
  SELECT I.ID_INVENTARIO, I.ID_PRODUCTO, I.STOCK, P.NOMBRE AS NOMBRE
FROM "USER_JAVA"."INVENTARIO" I
JOIN "USER_JAVA"."PRODUCTOS" P ON I.ID_PRODUCTO = P.ID_PRODUCTO
;

--------------------------------------------------------
--  DDL for View V_LOGS_USUARIOS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "USER_JAVA"."V_LOGS_USUARIOS" ("ID_LOG", "ID_USUARIO", "NOMBRE_USUARIO", "ACCION", "FECHA") AS 
  SELECT L.ID_LOG, L.ID_USUARIO, U.NOMBRE AS NOMBRE_USUARIO, L.ACCION, L.FECHA
FROM "USER_JAVA"."LOGS" L
JOIN "USER_JAVA"."USUARIOS" U ON L.ID_USUARIO = U.ID_USUARIO
;
--------------------------------------------------------
--  DDL for View V_PRODUCTOS
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "USER_JAVA"."V_PRODUCTOS" ("ID_PRODUCTO", "PRODUCTO", "CATEGORIA", "PROVEEDOR", "UNIDAD", "ID_INVENTARIO", "DISPONIBLE") AS 
  Select 
    p.id_producto,
    p.nombre as producto,
    ca.nombre as categoria,
    pr.nombre as proveedor,
    un.nombre as unidad,
    inv.id_inventario,
    inv.stock as disponible
from productos p
left join inventario inv on inv.id_producto = p.id_producto
left join categorias ca on p.id_categoria = ca.id_categoria
left join  proveedores pr on pr.id_proveedor = p.id_proveedor
left join unidades un on un.id_unidad = p.id_unidad
;
--------------------------------------------------------
--  DDL for View V_PRODUCTOS_DISPONIBLES
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "USER_JAVA"."V_PRODUCTOS_DISPONIBLES" ("ID_PRODUCTO", "NOMBRE", "PRECIO_NUEVO", "STOCK") AS 
  SELECT 
    pr.ID_PRODUCTO, 
    pr.NOMBRE, 
    hp.precio_nuevo, 
    inv.stock
FROM PRODUCTOS pr
left join inventario inv on inv.id_producto = pr.id_producto
left join historial_precios hp on hp.id_producto = pr.id_producto
WHERE STOCK > 0
;
--------------------------------------------------------
--  DDL for View V_PRODUCTOS_POR_CATEGORIA
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "USER_JAVA"."V_PRODUCTOS_POR_CATEGORIA" ("ID_PRODUCTO", "NOMBRE", "ID_CATEGORIA", "ID_UNIDAD", "NOMBRE_CATEGORIA") AS 
  SELECT
    p.ID_PRODUCTO,
    p.NOMBRE,
    p.ID_CATEGORIA,
    p.ID_UNIDAD,
    c.nombre AS NOMBRE_CATEGORIA
FROM
    PRODUCTOS p
LEFT JOIN
    CATEGORIAS c ON c.ID_CATEGORIA = p.ID_CATEGORIA
;
--------------------------------------------------------
--  DDL for View V_PRODUCTOS_POR_PROVEEDOR
--------------------------------------------------------

  CREATE OR REPLACE FORCE NONEDITIONABLE VIEW "USER_JAVA"."V_PRODUCTOS_POR_PROVEEDOR" ("NOMBRE_PRODUCTO", "NOMBRE_PROVEEDOR", "NOMBRE_CATEGORIA") AS 
  SELECT
    p.nombre as nombre_producto, 
    pr.nombre as nombre_proveedor, 
    c.nombre as nombre_categoria 
FROM proveedores pr
LEFT JOIN productos p ON pr.id_proveedor = p.id_proveedor
left join categorias c on  c.id_categoria = p.id_categoria

where pr.id_proveedor = pr.id_proveedor
;
REM INSERTING into USER_JAVA.ALERTAS
SET DEFINE OFF;
REM INSERTING into USER_JAVA.AUDITORIA_DETALLE_COMPRAS
SET DEFINE OFF;
REM INSERTING into USER_JAVA.CALIDAD
SET DEFINE OFF;
REM INSERTING into USER_JAVA.CATEGORIAS
SET DEFINE OFF;
Insert into USER_JAVA.CATEGORIAS (ID_CATEGORIA,NOMBRE,DESCRIPCION) values (1,'Frutas',null);
Insert into USER_JAVA.CATEGORIAS (ID_CATEGORIA,NOMBRE,DESCRIPCION) values (2,'Verduras',null);
Insert into USER_JAVA.CATEGORIAS (ID_CATEGORIA,NOMBRE,DESCRIPCION) values (3,'Lácteos',null);
Insert into USER_JAVA.CATEGORIAS (ID_CATEGORIA,NOMBRE,DESCRIPCION) values (4,'Carnes',null);
Insert into USER_JAVA.CATEGORIAS (ID_CATEGORIA,NOMBRE,DESCRIPCION) values (5,'Bebidas',null);
Insert into USER_JAVA.CATEGORIAS (ID_CATEGORIA,NOMBRE,DESCRIPCION) values (1,'Frutas',null);
Insert into USER_JAVA.CATEGORIAS (ID_CATEGORIA,NOMBRE,DESCRIPCION) values (2,'Verduras',null);
Insert into USER_JAVA.CATEGORIAS (ID_CATEGORIA,NOMBRE,DESCRIPCION) values (3,'Lácteos',null);
Insert into USER_JAVA.CATEGORIAS (ID_CATEGORIA,NOMBRE,DESCRIPCION) values (4,'Carnes',null);
Insert into USER_JAVA.CATEGORIAS (ID_CATEGORIA,NOMBRE,DESCRIPCION) values (5,'Bebidas',null);
Insert into USER_JAVA.CATEGORIAS (ID_CATEGORIA,NOMBRE,DESCRIPCION) values (1,'Frutas',null);
Insert into USER_JAVA.CATEGORIAS (ID_CATEGORIA,NOMBRE,DESCRIPCION) values (2,'Verduras',null);
Insert into USER_JAVA.CATEGORIAS (ID_CATEGORIA,NOMBRE,DESCRIPCION) values (3,'Lácteos',null);
Insert into USER_JAVA.CATEGORIAS (ID_CATEGORIA,NOMBRE,DESCRIPCION) values (4,'Carnes',null);
Insert into USER_JAVA.CATEGORIAS (ID_CATEGORIA,NOMBRE,DESCRIPCION) values (5,'Bebidas',null);
REM INSERTING into USER_JAVA.CLIENTES
SET DEFINE OFF;
Insert into USER_JAVA.CLIENTES (ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION) values (1,'Cliente A','Ana Pérez','Calle A #a-a');
Insert into USER_JAVA.CLIENTES (ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION) values (2,'Cliente B','Carlos López','Avenida B #b-b');
Insert into USER_JAVA.CLIENTES (ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION) values (3,'Cliente C','Sofía Gómez','Carrera C #c-c');
Insert into USER_JAVA.CLIENTES (ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION) values (4,'Cliente D','Mateo Vargas','Diagonal D #d-d');
Insert into USER_JAVA.CLIENTES (ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION) values (5,'Cliente E','Isabela Castro','Transversal E #e-e');
Insert into USER_JAVA.CLIENTES (ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION) values (6,'Cliente F','Javier Ruiz','Pasaje F #f-f');
Insert into USER_JAVA.CLIENTES (ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION) values (7,'Cliente G','Valentina Díaz','Manzana G Casa #g-g');
REM INSERTING into USER_JAVA.COMPRAS
SET DEFINE OFF;
Insert into USER_JAVA.COMPRAS (ID_COMPRA,ID_PROVEEDOR,FECHA_COMPRA,TOTAL,ID_ESTADO) values (1,1,to_date('14-APR-25','DD-MON-RR'),500,1);
REM INSERTING into USER_JAVA.DETALLE_COMPRAS
SET DEFINE OFF;
Insert into USER_JAVA.DETALLE_COMPRAS (ID_DETALLE_COMPRA,ID_COMPRA,ID_PRODUCTO,CANTIDAD,PRECIO_UNITARIO) values (1,1,1,2,250);
REM INSERTING into USER_JAVA.DETALLE_VENTAS
SET DEFINE OFF;
REM INSERTING into USER_JAVA.DEVOLUCIONES
SET DEFINE OFF;
REM INSERTING into USER_JAVA.ESTADOS_ORDEN
SET DEFINE OFF;
REM INSERTING into USER_JAVA.ESTADOS_ORDENES
SET DEFINE OFF;
Insert into USER_JAVA.ESTADOS_ORDENES (ID_ESTADO,NOMBRE_ESTADO) values (1,'Pendiente');
Insert into USER_JAVA.ESTADOS_ORDENES (ID_ESTADO,NOMBRE_ESTADO) values (2,'Completado');
Insert into USER_JAVA.ESTADOS_ORDENES (ID_ESTADO,NOMBRE_ESTADO) values (3,'Cancelado');
REM INSERTING into USER_JAVA.GASTOS
SET DEFINE OFF;
Insert into USER_JAVA.GASTOS (ID_GASTO,DESCRIPCION,MONTO,FECHA) values (1,'Compra de insumos de limpieza',25.5,to_date('06-APR-25','DD-MON-RR'));
Insert into USER_JAVA.GASTOS (ID_GASTO,DESCRIPCION,MONTO,FECHA) values (2,'Pago de electricidad (mes anterior)',75.8,to_date('06-MAR-25','DD-MON-RR'));
Insert into USER_JAVA.GASTOS (ID_GASTO,DESCRIPCION,MONTO,FECHA) values (3,'Salarios de empleados (semana pasada)',350,to_date('30-MAR-25','DD-MON-RR'));
Insert into USER_JAVA.GASTOS (ID_GASTO,DESCRIPCION,MONTO,FECHA) values (4,'Compra de bolsas reutilizables',45.2,to_date('03-APR-25','DD-MON-RR'));
Insert into USER_JAVA.GASTOS (ID_GASTO,DESCRIPCION,MONTO,FECHA) values (5,'Pago de agua (mes anterior)',35.15,to_date('05-MAR-25','DD-MON-RR'));
REM INSERTING into USER_JAVA.HISTORIAL_PRECIOS
SET DEFINE OFF;
REM INSERTING into USER_JAVA.HISTORIAL_STOCK
SET DEFINE OFF;
REM INSERTING into USER_JAVA.INVENTARIO
SET DEFINE OFF;
REM INSERTING into USER_JAVA.LOGS
SET DEFINE OFF;
Insert into USER_JAVA.LOGS (ID_LOG,ID_USUARIO,ACCION,FECHA) values (1,null,'UPDATE en PRODUCTOS (ID: 1) - Nombre ANTES: Manzana Roja, AHORA: Manzana Roja',to_date('14-APR-25','DD-MON-RR'));
Insert into USER_JAVA.LOGS (ID_LOG,ID_USUARIO,ACCION,FECHA) values (2,null,'UPDATE en PRODUCTOS (ID: 1) - Nombre ANTES: Manzana Roja, AHORA: Manzana Roja',to_date('14-APR-25','DD-MON-RR'));
REM INSERTING into USER_JAVA.PAGOS
SET DEFINE OFF;
REM INSERTING into USER_JAVA.PRODUCTOS
SET DEFINE OFF;
Insert into USER_JAVA.PRODUCTOS (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,ID_PROVEEDOR,ID_INVENTARIO) values (1,'Manzana Roja',1,1,1,1);
Insert into USER_JAVA.PRODUCTOS (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,ID_PROVEEDOR,ID_INVENTARIO) values (2,'Banana',1,1,1,null);
Insert into USER_JAVA.PRODUCTOS (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,ID_PROVEEDOR,ID_INVENTARIO) values (3,'Tomate Rojo',2,1,2,null);
Insert into USER_JAVA.PRODUCTOS (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,ID_PROVEEDOR,ID_INVENTARIO) values (4,'Lechuga Crespa',2,2,2,null);
Insert into USER_JAVA.PRODUCTOS (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,ID_PROVEEDOR,ID_INVENTARIO) values (5,'Leche Entera',3,2,3,null);
Insert into USER_JAVA.PRODUCTOS (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,ID_PROVEEDOR,ID_INVENTARIO) values (6,'Pera Verde',1,1,3,null);
Insert into USER_JAVA.PRODUCTOS (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,ID_PROVEEDOR,ID_INVENTARIO) values (7,'Zanahoria',2,1,4,null);
REM INSERTING into USER_JAVA.PROMOCIONES
SET DEFINE OFF;
REM INSERTING into USER_JAVA.PROVEEDORES
SET DEFINE OFF;
Insert into USER_JAVA.PROVEEDORES (ID_PROVEEDOR,NOMBRE,CONTACTO,DIRECCION) values (1,'Proveedor A','Juan Pérez','Calle 1 #1-1');
Insert into USER_JAVA.PROVEEDORES (ID_PROVEEDOR,NOMBRE,CONTACTO,DIRECCION) values (2,'Proveedor B','María López','Avenida 2 #2-2');
Insert into USER_JAVA.PROVEEDORES (ID_PROVEEDOR,NOMBRE,CONTACTO,DIRECCION) values (3,'Proveedor C','Carlos Gómez','Carrera 3 #3-3');
Insert into USER_JAVA.PROVEEDORES (ID_PROVEEDOR,NOMBRE,CONTACTO,DIRECCION) values (4,'Proveedor D','Laura Vargas','Diagonal 4 #4-4');
Insert into USER_JAVA.PROVEEDORES (ID_PROVEEDOR,NOMBRE,CONTACTO,DIRECCION) values (5,'Proveedor E','Pedro Castro','Transversal 5 #5-5');
REM INSERTING into USER_JAVA.REPORTES
SET DEFINE OFF;
REM INSERTING into USER_JAVA.ROLES
SET DEFINE OFF;
Insert into USER_JAVA.ROLES (ID_ROL,NOMBRE) values (2,'ADMIN');
Insert into USER_JAVA.ROLES (ID_ROL,NOMBRE) values (1,'USER');
REM INSERTING into USER_JAVA.UNIDADES
SET DEFINE OFF;
Insert into USER_JAVA.UNIDADES (ID_UNIDAD,NOMBRE) values (1,'KG');
Insert into USER_JAVA.UNIDADES (ID_UNIDAD,NOMBRE) values (2,'Unidades');
REM INSERTING into USER_JAVA.USUARIOS
SET DEFINE OFF;
Insert into USER_JAVA.USUARIOS (ID_USUARIO,NOMBRE,CORREO,CONTRASENA,ID_ROL,FECHA_CREACION) values (1,'Juan Pérez','juan@email.com','D16C4D4FAF8B76364248B9F836CD3A6697B8BDAE9D042FDD7B08DB5E76FDE4BE',1,to_timestamp('20-MAR-25 06.12.50.467000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_JAVA.USUARIOS (ID_USUARIO,NOMBRE,CORREO,CONTRASENA,ID_ROL,FECHA_CREACION) values (21,'gabriel','gabrielgranera28@hotmail.com','03AC674216F3E15C761EE1A5E255F067953623C8B388B4459E13F978D7C846F4',2,to_timestamp('03-APR-25 08.35.25.472000000 PM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_JAVA.USUARIOS (ID_USUARIO,NOMBRE,CORREO,CONTRASENA,ID_ROL,FECHA_CREACION) values (2,'Employee One','employee1@verduleria.com','5F4DCC3B5AA765D61D8327DEB882CF99B59893710C93A38CDFCFF6962A8C5E60',2,to_timestamp('17-MAR-25 12.01.03.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
Insert into USER_JAVA.USUARIOS (ID_USUARIO,NOMBRE,CORREO,CONTRASENA,ID_ROL,FECHA_CREACION) values (4,'Employee Two','employee2@verduleria.com','A94A8FE5CCB19BA61C4C0873D391E987982FBBD3',2,to_timestamp('01-APR-25 12.01.03.000000000 AM','DD-MON-RR HH.MI.SSXFF AM'));
REM INSERTING into USER_JAVA.VENTAS
SET DEFINE OFF;
Insert into USER_JAVA.VENTAS (ID_VENTA,ID_CLIENTE,FECHA_VENTA,TOTAL) values (1,1,to_date('31-MAR-25','DD-MON-RR'),75);
Insert into USER_JAVA.VENTAS (ID_VENTA,ID_CLIENTE,FECHA_VENTA,TOTAL) values (2,2,to_date('02-APR-25','DD-MON-RR'),110.25);
Insert into USER_JAVA.VENTAS (ID_VENTA,ID_CLIENTE,FECHA_VENTA,TOTAL) values (3,3,to_date('04-APR-25','DD-MON-RR'),45.5);
Insert into USER_JAVA.VENTAS (ID_VENTA,ID_CLIENTE,FECHA_VENTA,TOTAL) values (4,1,to_date('05-APR-25','DD-MON-RR'),160.1);
Insert into USER_JAVA.VENTAS (ID_VENTA,ID_CLIENTE,FECHA_VENTA,TOTAL) values (5,4,to_date('06-APR-25','DD-MON-RR'),92.8);
Insert into USER_JAVA.VENTAS (ID_VENTA,ID_CLIENTE,FECHA_VENTA,TOTAL) values (1,1,to_date('31-MAR-25','DD-MON-RR'),75);
Insert into USER_JAVA.VENTAS (ID_VENTA,ID_CLIENTE,FECHA_VENTA,TOTAL) values (2,2,to_date('02-APR-25','DD-MON-RR'),110.25);
Insert into USER_JAVA.VENTAS (ID_VENTA,ID_CLIENTE,FECHA_VENTA,TOTAL) values (3,3,to_date('04-APR-25','DD-MON-RR'),45.5);
Insert into USER_JAVA.VENTAS (ID_VENTA,ID_CLIENTE,FECHA_VENTA,TOTAL) values (4,1,to_date('05-APR-25','DD-MON-RR'),160.1);
Insert into USER_JAVA.VENTAS (ID_VENTA,ID_CLIENTE,FECHA_VENTA,TOTAL) values (5,4,to_date('06-APR-25','DD-MON-RR'),92.8);
Insert into USER_JAVA.VENTAS (ID_VENTA,ID_CLIENTE,FECHA_VENTA,TOTAL) values (1,1,to_date('31-MAR-25','DD-MON-RR'),75);
Insert into USER_JAVA.VENTAS (ID_VENTA,ID_CLIENTE,FECHA_VENTA,TOTAL) values (2,2,to_date('02-APR-25','DD-MON-RR'),110.25);
Insert into USER_JAVA.VENTAS (ID_VENTA,ID_CLIENTE,FECHA_VENTA,TOTAL) values (3,3,to_date('04-APR-25','DD-MON-RR'),45.5);
Insert into USER_JAVA.VENTAS (ID_VENTA,ID_CLIENTE,FECHA_VENTA,TOTAL) values (4,1,to_date('05-APR-25','DD-MON-RR'),160.1);
Insert into USER_JAVA.VENTAS (ID_VENTA,ID_CLIENTE,FECHA_VENTA,TOTAL) values (5,4,to_date('06-APR-25','DD-MON-RR'),92.8);
REM INSERTING into USER_JAVA.VISTA_INVENTARIO_COMPLETO
SET DEFINE OFF;
Insert into USER_JAVA.VISTA_INVENTARIO_COMPLETO (ID_PRODUCTO,NOMBRE_PRODUCTO,NOMBRE_CATEGORIA,STOCK,UBICACION) values (1,'Manzana Roja','Frutas',null,null);
Insert into USER_JAVA.VISTA_INVENTARIO_COMPLETO (ID_PRODUCTO,NOMBRE_PRODUCTO,NOMBRE_CATEGORIA,STOCK,UBICACION) values (2,'Banana','Frutas',null,null);
Insert into USER_JAVA.VISTA_INVENTARIO_COMPLETO (ID_PRODUCTO,NOMBRE_PRODUCTO,NOMBRE_CATEGORIA,STOCK,UBICACION) values (6,'Pera Verde','Frutas',null,null);
Insert into USER_JAVA.VISTA_INVENTARIO_COMPLETO (ID_PRODUCTO,NOMBRE_PRODUCTO,NOMBRE_CATEGORIA,STOCK,UBICACION) values (3,'Tomate Rojo','Verduras',null,null);
Insert into USER_JAVA.VISTA_INVENTARIO_COMPLETO (ID_PRODUCTO,NOMBRE_PRODUCTO,NOMBRE_CATEGORIA,STOCK,UBICACION) values (4,'Lechuga Crespa','Verduras',null,null);
Insert into USER_JAVA.VISTA_INVENTARIO_COMPLETO (ID_PRODUCTO,NOMBRE_PRODUCTO,NOMBRE_CATEGORIA,STOCK,UBICACION) values (7,'Zanahoria','Verduras',null,null);
Insert into USER_JAVA.VISTA_INVENTARIO_COMPLETO (ID_PRODUCTO,NOMBRE_PRODUCTO,NOMBRE_CATEGORIA,STOCK,UBICACION) values (5,'Leche Entera','Lácteos',null,null);
Insert into USER_JAVA.VISTA_INVENTARIO_COMPLETO (ID_PRODUCTO,NOMBRE_PRODUCTO,NOMBRE_CATEGORIA,STOCK,UBICACION) values (1,'Manzana Roja','Frutas',null,null);
Insert into USER_JAVA.VISTA_INVENTARIO_COMPLETO (ID_PRODUCTO,NOMBRE_PRODUCTO,NOMBRE_CATEGORIA,STOCK,UBICACION) values (2,'Banana','Frutas',null,null);
Insert into USER_JAVA.VISTA_INVENTARIO_COMPLETO (ID_PRODUCTO,NOMBRE_PRODUCTO,NOMBRE_CATEGORIA,STOCK,UBICACION) values (6,'Pera Verde','Frutas',null,null);
Insert into USER_JAVA.VISTA_INVENTARIO_COMPLETO (ID_PRODUCTO,NOMBRE_PRODUCTO,NOMBRE_CATEGORIA,STOCK,UBICACION) values (3,'Tomate Rojo','Verduras',null,null);
Insert into USER_JAVA.VISTA_INVENTARIO_COMPLETO (ID_PRODUCTO,NOMBRE_PRODUCTO,NOMBRE_CATEGORIA,STOCK,UBICACION) values (4,'Lechuga Crespa','Verduras',null,null);
Insert into USER_JAVA.VISTA_INVENTARIO_COMPLETO (ID_PRODUCTO,NOMBRE_PRODUCTO,NOMBRE_CATEGORIA,STOCK,UBICACION) values (7,'Zanahoria','Verduras',null,null);
Insert into USER_JAVA.VISTA_INVENTARIO_COMPLETO (ID_PRODUCTO,NOMBRE_PRODUCTO,NOMBRE_CATEGORIA,STOCK,UBICACION) values (5,'Leche Entera','Lácteos',null,null);
Insert into USER_JAVA.VISTA_INVENTARIO_COMPLETO (ID_PRODUCTO,NOMBRE_PRODUCTO,NOMBRE_CATEGORIA,STOCK,UBICACION) values (1,'Manzana Roja','Frutas',null,null);
Insert into USER_JAVA.VISTA_INVENTARIO_COMPLETO (ID_PRODUCTO,NOMBRE_PRODUCTO,NOMBRE_CATEGORIA,STOCK,UBICACION) values (2,'Banana','Frutas',null,null);
Insert into USER_JAVA.VISTA_INVENTARIO_COMPLETO (ID_PRODUCTO,NOMBRE_PRODUCTO,NOMBRE_CATEGORIA,STOCK,UBICACION) values (6,'Pera Verde','Frutas',null,null);
Insert into USER_JAVA.VISTA_INVENTARIO_COMPLETO (ID_PRODUCTO,NOMBRE_PRODUCTO,NOMBRE_CATEGORIA,STOCK,UBICACION) values (3,'Tomate Rojo','Verduras',null,null);
Insert into USER_JAVA.VISTA_INVENTARIO_COMPLETO (ID_PRODUCTO,NOMBRE_PRODUCTO,NOMBRE_CATEGORIA,STOCK,UBICACION) values (4,'Lechuga Crespa','Verduras',null,null);
Insert into USER_JAVA.VISTA_INVENTARIO_COMPLETO (ID_PRODUCTO,NOMBRE_PRODUCTO,NOMBRE_CATEGORIA,STOCK,UBICACION) values (7,'Zanahoria','Verduras',null,null);
Insert into USER_JAVA.VISTA_INVENTARIO_COMPLETO (ID_PRODUCTO,NOMBRE_PRODUCTO,NOMBRE_CATEGORIA,STOCK,UBICACION) values (5,'Leche Entera','Lácteos',null,null);
REM INSERTING into USER_JAVA.VW_COMPRAS_POR_PROVEEDOR
SET DEFINE OFF;
Insert into USER_JAVA.VW_COMPRAS_POR_PROVEEDOR (PROVEEDOR,NUMERO_COMPRAS,TOTAL_GASTADO) values ('Proveedor A',1,500);
REM INSERTING into USER_JAVA.VW_DETALLE_COMPLETO_COMPRAS
SET DEFINE OFF;
Insert into USER_JAVA.VW_DETALLE_COMPLETO_COMPRAS (ID_COMPRA,FECHA_COMPRA,PROVEEDOR,PRODUCTO,CANTIDAD,PRECIO_UNITARIO,SUBTOTAL,TOTAL_COMPRA) values (1,to_date('14-APR-25','DD-MON-RR'),'Proveedor A','Manzana Roja',2,250,500,500);
REM INSERTING into USER_JAVA.VW_DETALLE_COMPRAS
SET DEFINE OFF;
Insert into USER_JAVA.VW_DETALLE_COMPRAS (ID_COMPRA,FECHA_COMPRA,PRODUCTO,CANTIDAD,PRECIO_UNITARIO,SUBTOTAL,TOTAL_COMPRA) values (1,to_date('14-APR-25','DD-MON-RR'),'Manzana Roja',2,250,500,500);
REM INSERTING into USER_JAVA.VW_PRODUCTOS_MAS_COMPRADOS
SET DEFINE OFF;
Insert into USER_JAVA.VW_PRODUCTOS_MAS_COMPRADOS (PRODUCTO,TOTAL_CANTIDAD,TOTAL_VENDIDO) values ('Manzana Roja',2,500);
REM INSERTING into USER_JAVA.VW_RESUMEN_COMPRAS_POR_FECHA
SET DEFINE OFF;
Insert into USER_JAVA.VW_RESUMEN_COMPRAS_POR_FECHA (FECHA_COMPRA,TOTAL_DEL_DIA) values (to_date('14-APR-25','DD-MON-RR'),500);
REM INSERTING into USER_JAVA.VW_RESUMEN_VENTAS_POR_PRODUCTO
SET DEFINE OFF;
REM INSERTING into USER_JAVA.V_ALERTAS_RECIENTES
SET DEFINE OFF;
REM INSERTING into USER_JAVA.V_CLIENTES_COMPRAS
SET DEFINE OFF;
Insert into USER_JAVA.V_CLIENTES_COMPRAS (ID_VENTA,ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION,FECHA_VENTA,TOTAL) values (1,1,'Cliente A','Ana Pérez','Calle A #a-a',to_date('31-MAR-25','DD-MON-RR'),75);
Insert into USER_JAVA.V_CLIENTES_COMPRAS (ID_VENTA,ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION,FECHA_VENTA,TOTAL) values (2,2,'Cliente B','Carlos López','Avenida B #b-b',to_date('02-APR-25','DD-MON-RR'),110.25);
Insert into USER_JAVA.V_CLIENTES_COMPRAS (ID_VENTA,ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION,FECHA_VENTA,TOTAL) values (3,3,'Cliente C','Sofía Gómez','Carrera C #c-c',to_date('04-APR-25','DD-MON-RR'),45.5);
Insert into USER_JAVA.V_CLIENTES_COMPRAS (ID_VENTA,ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION,FECHA_VENTA,TOTAL) values (4,1,'Cliente A','Ana Pérez','Calle A #a-a',to_date('05-APR-25','DD-MON-RR'),160.1);
Insert into USER_JAVA.V_CLIENTES_COMPRAS (ID_VENTA,ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION,FECHA_VENTA,TOTAL) values (5,4,'Cliente D','Mateo Vargas','Diagonal D #d-d',to_date('06-APR-25','DD-MON-RR'),92.8);
Insert into USER_JAVA.V_CLIENTES_COMPRAS (ID_VENTA,ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION,FECHA_VENTA,TOTAL) values (1,1,'Cliente A','Ana Pérez','Calle A #a-a',to_date('31-MAR-25','DD-MON-RR'),75);
Insert into USER_JAVA.V_CLIENTES_COMPRAS (ID_VENTA,ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION,FECHA_VENTA,TOTAL) values (2,2,'Cliente B','Carlos López','Avenida B #b-b',to_date('02-APR-25','DD-MON-RR'),110.25);
Insert into USER_JAVA.V_CLIENTES_COMPRAS (ID_VENTA,ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION,FECHA_VENTA,TOTAL) values (3,3,'Cliente C','Sofía Gómez','Carrera C #c-c',to_date('04-APR-25','DD-MON-RR'),45.5);
Insert into USER_JAVA.V_CLIENTES_COMPRAS (ID_VENTA,ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION,FECHA_VENTA,TOTAL) values (4,1,'Cliente A','Ana Pérez','Calle A #a-a',to_date('05-APR-25','DD-MON-RR'),160.1);
Insert into USER_JAVA.V_CLIENTES_COMPRAS (ID_VENTA,ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION,FECHA_VENTA,TOTAL) values (5,4,'Cliente D','Mateo Vargas','Diagonal D #d-d',to_date('06-APR-25','DD-MON-RR'),92.8);
Insert into USER_JAVA.V_CLIENTES_COMPRAS (ID_VENTA,ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION,FECHA_VENTA,TOTAL) values (1,1,'Cliente A','Ana Pérez','Calle A #a-a',to_date('31-MAR-25','DD-MON-RR'),75);
Insert into USER_JAVA.V_CLIENTES_COMPRAS (ID_VENTA,ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION,FECHA_VENTA,TOTAL) values (2,2,'Cliente B','Carlos López','Avenida B #b-b',to_date('02-APR-25','DD-MON-RR'),110.25);
Insert into USER_JAVA.V_CLIENTES_COMPRAS (ID_VENTA,ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION,FECHA_VENTA,TOTAL) values (3,3,'Cliente C','Sofía Gómez','Carrera C #c-c',to_date('04-APR-25','DD-MON-RR'),45.5);
Insert into USER_JAVA.V_CLIENTES_COMPRAS (ID_VENTA,ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION,FECHA_VENTA,TOTAL) values (4,1,'Cliente A','Ana Pérez','Calle A #a-a',to_date('05-APR-25','DD-MON-RR'),160.1);
Insert into USER_JAVA.V_CLIENTES_COMPRAS (ID_VENTA,ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION,FECHA_VENTA,TOTAL) values (5,4,'Cliente D','Mateo Vargas','Diagonal D #d-d',to_date('06-APR-25','DD-MON-RR'),92.8);
Insert into USER_JAVA.V_CLIENTES_COMPRAS (ID_VENTA,ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION,FECHA_VENTA,TOTAL) values (null,6,'Cliente F','Javier Ruiz','Pasaje F #f-f',null,null);
Insert into USER_JAVA.V_CLIENTES_COMPRAS (ID_VENTA,ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION,FECHA_VENTA,TOTAL) values (null,7,'Cliente G','Valentina Díaz','Manzana G Casa #g-g',null,null);
Insert into USER_JAVA.V_CLIENTES_COMPRAS (ID_VENTA,ID_CLIENTE,NOMBRE,CONTACTO,DIRECCION,FECHA_VENTA,TOTAL) values (null,5,'Cliente E','Isabela Castro','Transversal E #e-e',null,null);
REM INSERTING into USER_JAVA.V_COMPRAS_DETALLES
SET DEFINE OFF;
Insert into USER_JAVA.V_COMPRAS_DETALLES (ID_COMPRA,ID_PROVEEDOR,FECHA_COMPRA,TOTAL,ID_PRODUCTO,CANTIDAD,PRECIO_UNITARIO) values (1,1,to_date('14-APR-25','DD-MON-RR'),500,1,2,250);
REM INSERTING into USER_JAVA.V_DEVOLUCIONES_DETALLES
SET DEFINE OFF;
REM INSERTING into USER_JAVA.V_GASTOS_GENERALES
SET DEFINE OFF;
Insert into USER_JAVA.V_GASTOS_GENERALES (DESCRIPCION,MONTO,FECHA) values ('Compra de insumos de limpieza',25.5,to_date('06-APR-25','DD-MON-RR'));
Insert into USER_JAVA.V_GASTOS_GENERALES (DESCRIPCION,MONTO,FECHA) values ('Pago de electricidad (mes anterior)',75.8,to_date('06-MAR-25','DD-MON-RR'));
Insert into USER_JAVA.V_GASTOS_GENERALES (DESCRIPCION,MONTO,FECHA) values ('Salarios de empleados (semana pasada)',350,to_date('30-MAR-25','DD-MON-RR'));
Insert into USER_JAVA.V_GASTOS_GENERALES (DESCRIPCION,MONTO,FECHA) values ('Compra de bolsas reutilizables',45.2,to_date('03-APR-25','DD-MON-RR'));
Insert into USER_JAVA.V_GASTOS_GENERALES (DESCRIPCION,MONTO,FECHA) values ('Pago de agua (mes anterior)',35.15,to_date('05-MAR-25','DD-MON-RR'));
REM INSERTING into USER_JAVA.V_HISTORIAL_PRECIOS_POR_PRODUCTO
SET DEFINE OFF;
REM INSERTING into USER_JAVA.V_INVENTARIO_PRODUCTOS
SET DEFINE OFF;
REM INSERTING into USER_JAVA.V_LOGS_USUARIOS
SET DEFINE OFF;
REM INSERTING into USER_JAVA.V_PRODUCTOS
SET DEFINE OFF;
REM INSERTING into USER_JAVA.V_PRODUCTOS_DISPONIBLES
SET DEFINE OFF;
REM INSERTING into USER_JAVA.V_PRODUCTOS_POR_CATEGORIA
SET DEFINE OFF;
Insert into USER_JAVA.V_PRODUCTOS_POR_CATEGORIA (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,NOMBRE_CATEGORIA) values (1,'Manzana Roja',1,1,'Frutas');
Insert into USER_JAVA.V_PRODUCTOS_POR_CATEGORIA (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,NOMBRE_CATEGORIA) values (2,'Banana',1,1,'Frutas');
Insert into USER_JAVA.V_PRODUCTOS_POR_CATEGORIA (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,NOMBRE_CATEGORIA) values (6,'Pera Verde',1,1,'Frutas');
Insert into USER_JAVA.V_PRODUCTOS_POR_CATEGORIA (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,NOMBRE_CATEGORIA) values (3,'Tomate Rojo',2,1,'Verduras');
Insert into USER_JAVA.V_PRODUCTOS_POR_CATEGORIA (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,NOMBRE_CATEGORIA) values (4,'Lechuga Crespa',2,2,'Verduras');
Insert into USER_JAVA.V_PRODUCTOS_POR_CATEGORIA (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,NOMBRE_CATEGORIA) values (7,'Zanahoria',2,1,'Verduras');
Insert into USER_JAVA.V_PRODUCTOS_POR_CATEGORIA (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,NOMBRE_CATEGORIA) values (5,'Leche Entera',3,2,'Lácteos');
Insert into USER_JAVA.V_PRODUCTOS_POR_CATEGORIA (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,NOMBRE_CATEGORIA) values (1,'Manzana Roja',1,1,'Frutas');
Insert into USER_JAVA.V_PRODUCTOS_POR_CATEGORIA (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,NOMBRE_CATEGORIA) values (2,'Banana',1,1,'Frutas');
Insert into USER_JAVA.V_PRODUCTOS_POR_CATEGORIA (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,NOMBRE_CATEGORIA) values (6,'Pera Verde',1,1,'Frutas');
Insert into USER_JAVA.V_PRODUCTOS_POR_CATEGORIA (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,NOMBRE_CATEGORIA) values (3,'Tomate Rojo',2,1,'Verduras');
Insert into USER_JAVA.V_PRODUCTOS_POR_CATEGORIA (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,NOMBRE_CATEGORIA) values (4,'Lechuga Crespa',2,2,'Verduras');
Insert into USER_JAVA.V_PRODUCTOS_POR_CATEGORIA (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,NOMBRE_CATEGORIA) values (7,'Zanahoria',2,1,'Verduras');
Insert into USER_JAVA.V_PRODUCTOS_POR_CATEGORIA (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,NOMBRE_CATEGORIA) values (5,'Leche Entera',3,2,'Lácteos');
Insert into USER_JAVA.V_PRODUCTOS_POR_CATEGORIA (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,NOMBRE_CATEGORIA) values (1,'Manzana Roja',1,1,'Frutas');
Insert into USER_JAVA.V_PRODUCTOS_POR_CATEGORIA (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,NOMBRE_CATEGORIA) values (2,'Banana',1,1,'Frutas');
Insert into USER_JAVA.V_PRODUCTOS_POR_CATEGORIA (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,NOMBRE_CATEGORIA) values (6,'Pera Verde',1,1,'Frutas');
Insert into USER_JAVA.V_PRODUCTOS_POR_CATEGORIA (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,NOMBRE_CATEGORIA) values (3,'Tomate Rojo',2,1,'Verduras');
Insert into USER_JAVA.V_PRODUCTOS_POR_CATEGORIA (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,NOMBRE_CATEGORIA) values (4,'Lechuga Crespa',2,2,'Verduras');
Insert into USER_JAVA.V_PRODUCTOS_POR_CATEGORIA (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,NOMBRE_CATEGORIA) values (7,'Zanahoria',2,1,'Verduras');
Insert into USER_JAVA.V_PRODUCTOS_POR_CATEGORIA (ID_PRODUCTO,NOMBRE,ID_CATEGORIA,ID_UNIDAD,NOMBRE_CATEGORIA) values (5,'Leche Entera',3,2,'Lácteos');
REM INSERTING into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR
SET DEFINE OFF;
Insert into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR (NOMBRE_PRODUCTO,NOMBRE_PROVEEDOR,NOMBRE_CATEGORIA) values ('Manzana Roja','Proveedor A','Frutas');
Insert into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR (NOMBRE_PRODUCTO,NOMBRE_PROVEEDOR,NOMBRE_CATEGORIA) values ('Banana','Proveedor A','Frutas');
Insert into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR (NOMBRE_PRODUCTO,NOMBRE_PROVEEDOR,NOMBRE_CATEGORIA) values ('Pera Verde','Proveedor C','Frutas');
Insert into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR (NOMBRE_PRODUCTO,NOMBRE_PROVEEDOR,NOMBRE_CATEGORIA) values ('Tomate Rojo','Proveedor B','Verduras');
Insert into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR (NOMBRE_PRODUCTO,NOMBRE_PROVEEDOR,NOMBRE_CATEGORIA) values ('Lechuga Crespa','Proveedor B','Verduras');
Insert into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR (NOMBRE_PRODUCTO,NOMBRE_PROVEEDOR,NOMBRE_CATEGORIA) values ('Zanahoria','Proveedor D','Verduras');
Insert into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR (NOMBRE_PRODUCTO,NOMBRE_PROVEEDOR,NOMBRE_CATEGORIA) values ('Leche Entera','Proveedor C','Lácteos');
Insert into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR (NOMBRE_PRODUCTO,NOMBRE_PROVEEDOR,NOMBRE_CATEGORIA) values ('Manzana Roja','Proveedor A','Frutas');
Insert into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR (NOMBRE_PRODUCTO,NOMBRE_PROVEEDOR,NOMBRE_CATEGORIA) values ('Banana','Proveedor A','Frutas');
Insert into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR (NOMBRE_PRODUCTO,NOMBRE_PROVEEDOR,NOMBRE_CATEGORIA) values ('Pera Verde','Proveedor C','Frutas');
Insert into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR (NOMBRE_PRODUCTO,NOMBRE_PROVEEDOR,NOMBRE_CATEGORIA) values ('Tomate Rojo','Proveedor B','Verduras');
Insert into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR (NOMBRE_PRODUCTO,NOMBRE_PROVEEDOR,NOMBRE_CATEGORIA) values ('Lechuga Crespa','Proveedor B','Verduras');
Insert into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR (NOMBRE_PRODUCTO,NOMBRE_PROVEEDOR,NOMBRE_CATEGORIA) values ('Zanahoria','Proveedor D','Verduras');
Insert into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR (NOMBRE_PRODUCTO,NOMBRE_PROVEEDOR,NOMBRE_CATEGORIA) values ('Leche Entera','Proveedor C','Lácteos');
Insert into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR (NOMBRE_PRODUCTO,NOMBRE_PROVEEDOR,NOMBRE_CATEGORIA) values ('Manzana Roja','Proveedor A','Frutas');
Insert into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR (NOMBRE_PRODUCTO,NOMBRE_PROVEEDOR,NOMBRE_CATEGORIA) values ('Banana','Proveedor A','Frutas');
Insert into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR (NOMBRE_PRODUCTO,NOMBRE_PROVEEDOR,NOMBRE_CATEGORIA) values ('Pera Verde','Proveedor C','Frutas');
Insert into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR (NOMBRE_PRODUCTO,NOMBRE_PROVEEDOR,NOMBRE_CATEGORIA) values ('Tomate Rojo','Proveedor B','Verduras');
Insert into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR (NOMBRE_PRODUCTO,NOMBRE_PROVEEDOR,NOMBRE_CATEGORIA) values ('Lechuga Crespa','Proveedor B','Verduras');
Insert into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR (NOMBRE_PRODUCTO,NOMBRE_PROVEEDOR,NOMBRE_CATEGORIA) values ('Zanahoria','Proveedor D','Verduras');
Insert into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR (NOMBRE_PRODUCTO,NOMBRE_PROVEEDOR,NOMBRE_CATEGORIA) values ('Leche Entera','Proveedor C','Lácteos');
Insert into USER_JAVA.V_PRODUCTOS_POR_PROVEEDOR (NOMBRE_PRODUCTO,NOMBRE_PROVEEDOR,NOMBRE_CATEGORIA) values (null,'Proveedor E',null);
--------------------------------------------------------
--  DDL for Index IDX_DETALLE_COMPRA_ID_COMPRA
--------------------------------------------------------

  CREATE INDEX "USER_JAVA"."IDX_DETALLE_COMPRA_ID_COMPRA" ON "USER_JAVA"."DETALLE_COMPRAS" ("ID_COMPRA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IDX_DETALLE_PRODUCTO_ID_PRODUCTO
--------------------------------------------------------

  CREATE INDEX "USER_JAVA"."IDX_DETALLE_PRODUCTO_ID_PRODUCTO" ON "USER_JAVA"."DETALLE_COMPRAS" ("ID_PRODUCTO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index IDX_PRODUCTO_INVENTARIO
--------------------------------------------------------

  CREATE INDEX "USER_JAVA"."IDX_PRODUCTO_INVENTARIO" ON "USER_JAVA"."PRODUCTOS" ("ID_INVENTARIO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_PRODUCTOS
--------------------------------------------------------

  CREATE UNIQUE INDEX "USER_JAVA"."PK_PRODUCTOS" ON "USER_JAVA"."PRODUCTOS" ("ID_PRODUCTO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PK_PROVEEDORES
--------------------------------------------------------

  CREATE UNIQUE INDEX "USER_JAVA"."PK_PROVEEDORES" ON "USER_JAVA"."PROVEEDORES" ("ID_PROVEEDOR") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index ROLES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USER_JAVA"."ROLES_PK" ON "USER_JAVA"."ROLES" ("ID_ROL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008410
--------------------------------------------------------

  CREATE UNIQUE INDEX "USER_JAVA"."SYS_C008410" ON "USER_JAVA"."ESTADOS_ORDEN" ("ID_ESTADO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008411
--------------------------------------------------------

  CREATE UNIQUE INDEX "USER_JAVA"."SYS_C008411" ON "USER_JAVA"."ESTADOS_ORDEN" ("NOMBRE_ESTADO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008413
--------------------------------------------------------

  CREATE UNIQUE INDEX "USER_JAVA"."SYS_C008413" ON "USER_JAVA"."ESTADOS_ORDENES" ("ID_ESTADO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008414
--------------------------------------------------------

  CREATE UNIQUE INDEX "USER_JAVA"."SYS_C008414" ON "USER_JAVA"."ESTADOS_ORDENES" ("NOMBRE_ESTADO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008420
--------------------------------------------------------

  CREATE UNIQUE INDEX "USER_JAVA"."SYS_C008420" ON "USER_JAVA"."COMPRAS" ("ID_COMPRA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008428
--------------------------------------------------------

  CREATE UNIQUE INDEX "USER_JAVA"."SYS_C008428" ON "USER_JAVA"."DETALLE_COMPRAS" ("ID_DETALLE_COMPRA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index SYS_C008434
--------------------------------------------------------

  CREATE UNIQUE INDEX "USER_JAVA"."SYS_C008434" ON "USER_JAVA"."AUDITORIA_DETALLE_COMPRAS" ("ID_AUDITORIA") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index UQ_DETALLE_COMPRA_PRODUCTO
--------------------------------------------------------

  CREATE UNIQUE INDEX "USER_JAVA"."UQ_DETALLE_COMPRA_PRODUCTO" ON "USER_JAVA"."DETALLE_COMPRAS" ("ID_COMPRA", "ID_PRODUCTO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index USUARIOS_CORREO_UK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USER_JAVA"."USUARIOS_CORREO_UK" ON "USER_JAVA"."USUARIOS" ("CORREO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index USUARIOS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "USER_JAVA"."USUARIOS_PK" ON "USER_JAVA"."USUARIOS" ("ID_USUARIO") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

--------------------------------------------------------
--  DDL for Trigger ACTUALIZARSTOCKVENTA
--------------------------------------------------------
CREATE OR REPLACE TRIGGER "USER_JAVA"."ACTUALIZAR_STOCK_VENTA"
AFTER INSERT ON USER_JAVA.DETALLE_VENTAS
FOR EACH ROW
BEGIN
  UPDATE USER_JAVA.Inventario
  SET STOCK = STOCK - :new.CANTIDAD
  WHERE "ID_PRODUCTO" = :new.ID_PRODUCTO;
END;

/
ALTER TRIGGER "USER_JAVA"."ACTUALIZAR_STOCK_VENTA" ENABLE;
--------------------------------------------------------
--  DDL for Trigger ACTUALIZARTOTALVENTA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "USER_JAVA"."ACTUALIZARTOTALVENTA" 
AFTER UPDATE ON USER_JAVA.Detalle_Ventas
FOR EACH ROW
DECLARE
  totalVenta DECIMAL(10,2);
BEGIN
  SELECT SUM(precio_unitario * cantidad) INTO totalVenta
  FROM USER_JAVA.Detalle_Ventas
  WHERE id_venta = :new.id_venta;

  UPDATE USER_JAVA.Ventas
  SET total = totalVenta
  WHERE id_venta = :new.id_venta;
END;
/
ALTER TRIGGER "USER_JAVA"."ACTUALIZARTOTALVENTA" ENABLE;
--------------------------------------------------------
--  DDL for Trigger GENERARALERTASTOCKMINIMO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "USER_JAVA"."GENERARALERTASTOCKMINIMO" 
AFTER UPDATE ON USER_JAVA.Inventario
FOR EACH ROW
DECLARE
  stock_minimo NUMBER;
BEGIN
  -- Obtener el valor de stock_minimo
  SELECT stock_minimo INTO stock_minimo
  FROM USER_JAVA.Productos
  WHERE id_producto = :new.id_producto;

  -- Verificar si el stock es bajo
  IF :new.STOCK < stock_minimo THEN
    INSERT INTO USER_JAVA.Alertas (tipo, mensaje)
    VALUES ('Stock Bajo', 'El stock del producto ' || :new.id_producto || ' es bajo');
  END IF;
END;
/
ALTER TRIGGER "USER_JAVA"."GENERARALERTASTOCKMINIMO" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_ACTUALIZAR_HISTORIAL_STOCK_COMPRA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "USER_JAVA"."TRG_ACTUALIZAR_HISTORIAL_STOCK_COMPRA" 
AFTER INSERT ON USER_JAVA.Detalle_Compras
FOR EACH ROW
DECLARE
    v_cantidad_actual NUMBER := 0; -- Inicializar en 0 para nuevos productos
BEGIN
    BEGIN
        -- Obtener la cantidad más reciente del historial para el producto
        SELECT cantidad_nueva
        INTO v_cantidad_actual
        FROM USER_JAVA.Historial_Stock
        WHERE id_producto = :NEW.ID_PRODUCTO
        AND ROWNUM = 1
        ORDER BY fecha_cambio DESC;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            -- Si no existe registro previo, asumimos que el stock inicial es 0
            v_cantidad_actual := 0;
    END;

    -- Calcular el nuevo stock tras la compra
    v_cantidad_actual := v_cantidad_actual + :NEW.CANTIDAD;

    -- Agregar un registro en el historial del stock
    INSERT INTO Historial_Stock (id_producto, cantidad_anterior, cantidad_nueva, fecha_cambio)
    VALUES (:NEW.ID_PRODUCTO, v_cantidad_actual - :NEW.CANTIDAD, v_cantidad_actual, SYSDATE);
END;

/
ALTER TRIGGER "USER_JAVA"."TRG_ACTUALIZAR_HISTORIAL_STOCK_COMPRA" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_ACTUALIZAR_HISTORIAL_STOCK_DEVOLUCION
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "USER_JAVA"."TRG_ACTUALIZAR_HISTORIAL_STOCK_DEVOLUCION" 
AFTER INSERT ON USER_JAVA.Devoluciones
FOR EACH ROW
DECLARE
    v_cantidad_actual NUMBER := 0; -- Inicializamos en 0 para manejar productos nuevos
BEGIN
    BEGIN
        -- Obtener la cantidad más reciente del historial del producto
        SELECT cantidad_nueva
        INTO v_cantidad_actual
        FROM USER_JAVA.Historial_Stock
        WHERE id_producto = :NEW.ID_PRODUCTO
        AND ROWNUM = 1
        ORDER BY fecha_cambio DESC;
    EXCEPTION
        -- Si no existe registro previo para el producto, asumimos que la cantidad inicial es 0
        WHEN NO_DATA_FOUND THEN
            v_cantidad_actual := 0;
    END;

    -- Calcular la nueva cantidad en el historial tras la devolución
    v_cantidad_actual := v_cantidad_actual + :NEW.CANTIDAD;

    -- Insertar un registro en Historial_Stock reflejando el cambio
    INSERT INTO USER_JAVA.Historial_Stock (id_producto, cantidad_anterior, cantidad_nueva, fecha_cambio)
    VALUES (:NEW.ID_PRODUCTO, v_cantidad_actual - :NEW.CANTIDAD, v_cantidad_actual, SYSDATE);
END;

/
ALTER TRIGGER "USER_JAVA"."TRG_ACTUALIZAR_HISTORIAL_STOCK_DEVOLUCION" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_ACTUALIZAR_HISTORIAL_STOCK_VENTA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "USER_JAVA"."TRG_ACTUALIZAR_HISTORIAL_STOCK_VENTA" 
AFTER INSERT ON USER_JAVA.Detalle_Ventas
FOR EACH ROW
DECLARE
    v_cantidad_actual NUMBER := 0; -- Inicializamos en 0 para evitar problemas con productos nuevos
BEGIN
    BEGIN
        -- Obtener la cantidad más reciente del historial del producto
        SELECT cantidad_nueva
        INTO v_cantidad_actual
        FROM USER_JAVA.Historial_Stock
        WHERE id_producto = :NEW.ID_PRODUCTO
        AND ROWNUM = 1
        ORDER BY fecha_cambio DESC;
    EXCEPTION
        -- Si no existe registro previo para el producto, asumimos que la cantidad inicial es 0
        WHEN NO_DATA_FOUND THEN
            v_cantidad_actual := 0;
    END;

    -- Verificar que no se reduzca la cantidad por debajo de 0
    IF v_cantidad_actual < :NEW.CANTIDAD THEN
        RAISE_APPLICATION_ERROR(-20001, 'ERROR: No hay suficiente stock disponible para completar la venta.');
    END IF;

    -- Calcular la nueva cantidad en el historial tras la venta
    v_cantidad_actual := v_cantidad_actual - :NEW.CANTIDAD;

    -- Insertar un registro en Historial_Stock reflejando el cambio
    INSERT INTO USER_JAVA.Historial_Stock (id_producto, cantidad_anterior, cantidad_nueva, fecha_cambio)
    VALUES (:NEW.ID_PRODUCTO, v_cantidad_actual + :NEW.CANTIDAD, v_cantidad_actual, SYSDATE);
END;

/
ALTER TRIGGER "USER_JAVA"."TRG_ACTUALIZAR_HISTORIAL_STOCK_VENTA" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_AFTER_DELETE_PRODUCTOS_LOG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "USER_JAVA"."TRG_AFTER_DELETE_PRODUCTOS_LOG" 
AFTER DELETE ON USER_JAVA.PRODUCTOS
FOR EACH ROW
BEGIN
    INSERT INTO USER_JAVA.LOGS (id_log, id_usuario, accion, fecha)
    VALUES ("USER_JAVA"."ISEQ$$_76634".nextval,
            NULL,
            'DELETE en PRODUCTOS (ID: ' || :OLD.id_producto || ', Nombre: ' || :OLD.nombre || ')',
            SYSDATE);
END;

/
ALTER TRIGGER "USER_JAVA"."TRG_AFTER_DELETE_PRODUCTOS_LOG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_AFTER_INSERT_PRODUCTOS_LOG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "USER_JAVA"."TRG_AFTER_INSERT_PRODUCTOS_LOG" 
AFTER INSERT ON USER_JAVA.PRODUCTOS
FOR EACH ROW
BEGIN
    INSERT INTO USER_JAVA.LOGS (id_log, id_usuario, accion, fecha)
    VALUES ("USER_JAVA"."ISEQ$$_76634".nextval,
            -- Asume que tienes una forma de identificar el usuario que realiza la acción
            -- Esto podría ser una variable de sesión, una función de contexto, etc.
            -- Para este ejemplo, lo dejaremos como NULL.
            NULL,
            'INSERT en PRODUCTOS (ID: ' || :NEW.id_producto || ', Nombre: ' || :NEW.nombre || ')',
            SYSDATE);
END;

/
ALTER TRIGGER "USER_JAVA"."TRG_AFTER_INSERT_PRODUCTOS_LOG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_AFTER_INSERT_VENTAS_LOG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "USER_JAVA"."TRG_AFTER_INSERT_VENTAS_LOG" 
AFTER INSERT ON USER_JAVA.VENTAS
FOR EACH ROW
BEGIN
    INSERT INTO USER_JAVA.LOGS (id_log, id_usuario, accion, fecha)
    VALUES ("USER_JAVA"."ISEQ$$_76634".nextval,
            NULL,
            'INSERT en VENTAS (ID: ' || :NEW.id_venta || ', Cliente: ' || :NEW.id_cliente || ', Total: ' || :NEW.total || ')',
            SYSDATE);
END;

/
ALTER TRIGGER "USER_JAVA"."TRG_AFTER_INSERT_VENTAS_LOG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_AFTER_IU_INVENTARIO_BAJO_STOCK
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "USER_JAVA"."TRG_AFTER_IU_INVENTARIO_BAJO_STOCK" 
AFTER INSERT OR UPDATE ON USER_JAVA.INVENTARIO
FOR EACH ROW
DECLARE
    v_umbral_bajo_stock NUMBER := 10; -- Define el umbral de bajo stock
    v_nombre_producto VARCHAR2(100);
BEGIN
    -- Solo verificar si el stock actual es menor o igual al umbral
    IF :NEW.stock <= v_umbral_bajo_stock AND (:OLD.stock IS NULL OR :OLD.stock > v_umbral_bajo_stock) THEN
        -- Obtener el nombre del producto
        SELECT nombre
        INTO v_nombre_producto
        FROM USER_JAVA.PRODUCTOS
        WHERE id_producto = :NEW.id_producto;

        -- Insertar la alerta
        INSERT INTO USER_JAVA.ALERTAS (id_alerta, tipo, mensaje, fecha)
        VALUES ("USER_JAVA"."ISEQ$$_76631".nextval,
                'Bajo Stock',
                'El producto ' || v_nombre_producto || ' tiene un stock de ' || :NEW.stock || ' unidades.',
                SYSDATE);
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Error: No se encontró el producto con ID ' || :NEW.id_producto);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al generar alerta de bajo stock: ' || SQLERRM);
END;

/
ALTER TRIGGER "USER_JAVA"."TRG_AFTER_IU_INVENTARIO_BAJO_STOCK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_AFTER_UPDATE_PRODUCTOS_LOG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "USER_JAVA"."TRG_AFTER_UPDATE_PRODUCTOS_LOG" 
AFTER UPDATE ON USER_JAVA.PRODUCTOS
FOR EACH ROW
BEGIN
    INSERT INTO USER_JAVA.LOGS (id_log, id_usuario, accion, fecha)
    VALUES ("USER_JAVA"."ISEQ$$_76634".nextval,
            NULL,
            'UPDATE en PRODUCTOS (ID: ' || :NEW.id_producto || ') - Nombre ANTES: ' || :OLD.nombre || ', AHORA: ' || :NEW.nombre,
            SYSDATE);
    -- Puedes añadir más detalles sobre las columnas actualizadas si es necesario
END;

/
ALTER TRIGGER "USER_JAVA"."TRG_AFTER_UPDATE_PRODUCTOS_LOG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_AUDITORIA_DETALLE_COMPRAS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "USER_JAVA"."TRG_AUDITORIA_DETALLE_COMPRAS" 
AFTER INSERT OR UPDATE OR DELETE ON USER_JAVA.DETALLE_COMPRAS
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO USER_JAVA.AUDITORIA_DETALLE_COMPRAS (
            ID_AUDITORIA, ID_DETALLE_COMPRA, OPERACION, 
            CANTIDAD_ACTUAL, PRECIO_UNITARIO_ACTUAL
        ) VALUES (
            SEQ_AUDITORIA.NEXTVAL, :NEW.ID_DETALLE_COMPRA, 'INSERT', 
            :NEW.CANTIDAD, :NEW.PRECIO_UNITARIO
        );
    ELSIF UPDATING THEN
        INSERT INTO USER_JAVA.AUDITORIA_DETALLE_COMPRAS (
            ID_AUDITORIA, ID_DETALLE_COMPRA, OPERACION, 
            CANTIDAD_ANTERIOR, PRECIO_UNITARIO_ANTERIOR,
            CANTIDAD_ACTUAL, PRECIO_UNITARIO_ACTUAL
        ) VALUES (
            SEQ_AUDITORIA.NEXTVAL, :OLD.ID_DETALLE_COMPRA, 'UPDATE', 
            :OLD.CANTIDAD, :OLD.PRECIO_UNITARIO,
            :NEW.CANTIDAD, :NEW.PRECIO_UNITARIO
        );
    ELSIF DELETING THEN
        INSERT INTO USER_JAVA.AUDITORIA_DETALLE_COMPRAS (
            ID_AUDITORIA, ID_DETALLE_COMPRA, OPERACION, 
            CANTIDAD_ANTERIOR, PRECIO_UNITARIO_ANTERIOR
        ) VALUES (
            SEQ_AUDITORIA.NEXTVAL, :OLD.ID_DETALLE_COMPRA, 'DELETE', 
            :OLD.CANTIDAD, :OLD.PRECIO_UNITARIO
        );
    END IF;
END;

/
ALTER TRIGGER "USER_JAVA"."TRG_AUDITORIA_DETALLE_COMPRAS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_BEFORE_INSERT_PRODUCT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "USER_JAVA"."TRG_BEFORE_INSERT_PRODUCT" 
BEFORE INSERT ON USER_JAVA.PRODUCTOS
BEGIN
    IF NOT FN_CAN_ADD_PRODUCT THEN
        RAISE_APPLICATION_ERROR(-20001, 'No se puede agregar un producto. No hay inventarios disponibles.');
    END IF;
END;

/
ALTER TRIGGER "USER_JAVA"."TRG_BEFORE_INSERT_PRODUCT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_INVENTARIO_LLENO
--------------------------------------------------------

CREATE OR REPLACE NONEDITIONABLE TRIGGER "USER_JAVA"."TRG_INVENTARIO_LLENO" 
AFTER INSERT OR UPDATE ON USER_JAVA.Historial_Stock
FOR EACH ROW
DECLARE
    v_capacidad_maxima NUMBER;
BEGIN
    -- Obtener la capacidad máxima permitida para el inventario del producto
    SELECT stock
    INTO v_capacidad_maxima
    FROM USER_JAVA.Inventario
    WHERE id_inventario = (
        SELECT id_inventario FROM USER_JAVA.Productos WHERE id_producto = :NEW.id_producto
    );

    -- Comprobar si el stock disponible supera o iguala la capacidad máxima
    IF :NEW.cantidad_nueva >= v_capacidad_maxima THEN
        -- Registrar un aviso en los logs
        INSERT INTO USER_JAVA.Logs (ACCION, FECHA)
        VALUES (
            'El inventario del producto con ID ' || :NEW.id_producto || ' está lleno o excedido.',
            SYSDATE
        );
    END IF;
END;
/

ALTER TRIGGER "USER_JAVA"."TRG_INVENTARIO_LLENO" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_UPDATE_TOTAL_COMPRA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "USER_JAVA"."TRG_UPDATE_TOTAL_COMPRA" 
AFTER INSERT OR UPDATE OR DELETE ON USER_JAVA.DETALLE_COMPRAS
FOR EACH ROW
BEGIN
    -- Actualizar el TOTAL en la tabla COMPRAS después de cualquier cambio en DETALLE_COMPRAS
    UPDATE USER_JAVA.COMPRAS C
    SET C.TOTAL = (
        SELECT SUM(DC.CANTIDAD * DC.PRECIO_UNITARIO)
        FROM USER_JAVA.DETALLE_COMPRAS DC
        WHERE DC.ID_COMPRA = C.ID_COMPRA
    )
    WHERE C.ID_COMPRA = :OLD.ID_COMPRA OR C.ID_COMPRA = :NEW.ID_COMPRA;
END;

/
ALTER TRIGGER "USER_JAVA"."TRG_UPDATE_TOTAL_COMPRA" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_VALIDAR_STOCK
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "USER_JAVA"."TRG_VALIDAR_STOCK" 
BEFORE INSERT OR UPDATE ON USER_JAVA.DETALLE_COMPRAS
FOR EACH ROW
DECLARE
    V_STOCK_DISPONIBLE NUMBER;
BEGIN
    -- Obtener el stock disponible del producto
    SELECT USER_JAVA.STOCK_DISPONIBLE
    INTO V_STOCK_DISPONIBLE
    FROM USER_JAVA.INVENTARIO
    WHERE ID_PRODUCTO = :NEW.ID_PRODUCTO;

    -- Validar si la cantidad supera el stock disponible
    IF :NEW.CANTIDAD > V_STOCK_DISPONIBLE THEN
        RAISE_APPLICATION_ERROR(-20001, 
            'Cantidad supera el stock disponible.');
    END IF;
END;

/
ALTER TRIGGER "USER_JAVA"."TRG_VALIDAR_STOCK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_UPDATE_TOTAL_COMPRA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "USER_JAVA"."TRG_UPDATE_TOTAL_COMPRA" 
AFTER INSERT OR UPDATE OR DELETE ON USER_JAVA.DETALLE_COMPRAS
FOR EACH ROW
BEGIN
    -- Actualizar el TOTAL en la tabla COMPRAS después de cualquier cambio en DETALLE_COMPRAS
    UPDATE USER_JAVA.COMPRAS C
    SET C.TOTAL = (
        SELECT SUM(DC.CANTIDAD * DC.PRECIO_UNITARIO)
        FROM USER_JAVA.DETALLE_COMPRAS DC
        WHERE DC.ID_COMPRA = C.ID_COMPRA
    )
    WHERE C.ID_COMPRA = :OLD.ID_COMPRA OR C.ID_COMPRA = :NEW.ID_COMPRA;
END;

/
ALTER TRIGGER "USER_JAVA"."TRG_UPDATE_TOTAL_COMPRA" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_VALIDAR_STOCK
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "USER_JAVA"."TRG_VALIDAR_STOCK" 
BEFORE INSERT OR UPDATE ON USER_JAVA.DETALLE_COMPRAS
FOR EACH ROW
DECLARE
    V_STOCK_DISPONIBLE NUMBER;
BEGIN
    -- Obtener el stock disponible del producto
    SELECT STOCK
    INTO V_STOCK_DISPONIBLE
    FROM USER_JAVA.INVENTARIO
    WHERE ID_PRODUCTO = :NEW.ID_PRODUCTO;

    -- Validar si la cantidad supera el stock disponible
    IF :NEW.CANTIDAD > V_STOCK_DISPONIBLE THEN
        RAISE_APPLICATION_ERROR(-20001, 
            'Cantidad supera el stock disponible.');
    END IF;
END;

/
ALTER TRIGGER "USER_JAVA"."TRG_VALIDAR_STOCK" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_AUDITORIA_DETALLE_COMPRAS
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "USER_JAVA"."TRG_AUDITORIA_DETALLE_COMPRAS" 
AFTER INSERT OR UPDATE OR DELETE ON USER_JAVA.DETALLE_COMPRAS
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO USER_JAVA.AUDITORIA_DETALLE_COMPRAS (
            ID_AUDITORIA, ID_DETALLE_COMPRA, OPERACION, 
            CANTIDAD_ACTUAL, PRECIO_UNITARIO_ACTUAL
        ) VALUES (
            SEQ_AUDITORIA.NEXTVAL, :NEW.ID_DETALLE_COMPRA, 'INSERT', 
            :NEW.CANTIDAD, :NEW.PRECIO_UNITARIO
        );
    ELSIF UPDATING THEN
        INSERT INTO USER_JAVA.AUDITORIA_DETALLE_COMPRAS (
            ID_AUDITORIA, ID_DETALLE_COMPRA, OPERACION, 
            CANTIDAD_ANTERIOR, PRECIO_UNITARIO_ANTERIOR,
            CANTIDAD_ACTUAL, PRECIO_UNITARIO_ACTUAL
        ) VALUES (
            SEQ_AUDITORIA.NEXTVAL, :OLD.ID_DETALLE_COMPRA, 'UPDATE', 
            :OLD.CANTIDAD, :OLD.PRECIO_UNITARIO,
            :NEW.CANTIDAD, :NEW.PRECIO_UNITARIO
        );
    ELSIF DELETING THEN
        INSERT INTO USER_JAVA.AUDITORIA_DETALLE_COMPRAS (
            ID_AUDITORIA, ID_DETALLE_COMPRA, OPERACION, 
            CANTIDAD_ANTERIOR, PRECIO_UNITARIO_ANTERIOR
        ) VALUES (
            SEQ_AUDITORIA.NEXTVAL, :OLD.ID_DETALLE_COMPRA, 'DELETE', 
            :OLD.CANTIDAD, :OLD.PRECIO_UNITARIO
        );
    END IF;
END;

/
ALTER TRIGGER "USER_JAVA"."TRG_AUDITORIA_DETALLE_COMPRAS" ENABLE;
--------------------------------------------------------
--  DDL for Trigger TRG_ACTUALIZAR_HISTORIAL_STOCK_COMPRA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE TRIGGER "USER_JAVA"."TRG_ACTUALIZAR_HISTORIAL_STOCK_COMPRA" 
AFTER INSERT ON USER_JAVA.Detalle_Compras
FOR EACH ROW
DECLARE
    v_cantidad_actual NUMBER := 0; -- Inicializar en 0 para nuevos productos
BEGIN
    BEGIN
        -- Obtener la cantidad más reciente del historial para el producto
        SELECT cantidad_nueva
        INTO v_cantidad_actual
        FROM USER_JAVA.Historial_Stock
        WHERE id_producto = :NEW.ID_PRODUCTO
        AND ROWNUM = 1
        ORDER BY fecha_cambio DESC;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            -- Si no existe registro previo, asumimos que el stock inicial es 0
            v_cantidad_actual := 0;
    END;

    -- Calcular el nuevo stock tras la compra
    v_cantidad_actual := v_cantidad_actual + :NEW.CANTIDAD;

    -- Agregar un registro en el historial del stock
    INSERT INTO USER_JAVA.Historial_Stock (id_producto, cantidad_anterior, cantidad_nueva, fecha_cambio)
    VALUES (:NEW.ID_PRODUCTO, v_cantidad_actual - :NEW.CANTIDAD, v_cantidad_actual, SYSDATE);
END;

/
ALTER TRIGGER "USER_JAVA"."TRG_ACTUALIZAR_HISTORIAL_STOCK_COMPRA" ENABLE;
--------------------------------------------------------
--  DDL for Trigger ACTUALIZARTOTALVENTA
--------------------------------------------------------

  create or replace NONEDITIONABLE TRIGGER "USER_JAVA"."ACTUALIZARSTOCKVENTA" 
AFTER INSERT ON USER_JAVA.Detalle_Ventas
FOR EACH ROW
BEGIN
  UPDATE USER_JAVA.Inventario
  SET STOCK = STOCK - :new.cantidad
  WHERE id_producto = :new.id_producto;
END;

/
ALTER TRIGGER "USER_JAVA"."ACTUALIZARSTOCKVENTA" ENABLE;

--------------------------------------------------------
--  DDL for Procedure ACTUALIZAR_ESTADO_ORDEN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ACTUALIZAR_ESTADO_ORDEN" (
    P_ID_COMPRA IN NUMBER,
    P_NUEVO_ESTADO IN NUMBER
) AS
BEGIN
    UPDATE COMPRAS
    SET ID_ESTADO = P_NUEVO_ESTADO
    WHERE ID_COMPRA = P_ID_COMPRA;

    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure ACTUALIZAR_ORDEN_COMPRA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ACTUALIZAR_ORDEN_COMPRA" (
    ID_COMPRA_IN IN NUMBER,
    ID_PROVEEDOR_IN IN NUMBER,
    FECHA_IN IN DATE,
    ESTADO_IN IN VARCHAR2
) AS
BEGIN
    UPDATE COMPRAS
    SET ID_PROVEEDOR = ID_PROVEEDOR_IN,
        FECHA_COMPRA = FECHA_IN,
        ID_ESTADO = ESTADO_IN
    WHERE ID_COMPRA = ID_COMPRA_IN;
END;

/
--------------------------------------------------------
--  DDL for Procedure AGREGAR_DETALLE_COMPRA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."AGREGAR_DETALLE_COMPRA" (
    P_ID_COMPRA IN NUMBER,
    P_ID_PRODUCTO IN NUMBER,
    P_CANTIDAD IN NUMBER,
    P_PRECIO_UNITARIO IN NUMBER
) AS
BEGIN
    INSERT INTO DETALLE_COMPRAS (ID_DETALLE_COMPRA, ID_COMPRA, ID_PRODUCTO, CANTIDAD, PRECIO_UNITARIO)
    VALUES (DETALLE_COMPRAS_SEQ.NEXTVAL, P_ID_COMPRA, P_ID_PRODUCTO, P_CANTIDAD, P_PRECIO_UNITARIO);

    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure AGREGAR_ORDEN_COMPRA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."AGREGAR_ORDEN_COMPRA" (
    ID_PROVEEDOR_IN IN NUMBER,
    FECHA_IN IN DATE,
    ESTADO_IN IN VARCHAR2,
    ID_COMPRA_OUT OUT NUMBER
) AS
BEGIN
    INSERT INTO COMPRAS (ID_COMPRA, ID_PROVEEDOR, FECHA_COMPRA, ID_ESTADO, TOTAL)
    VALUES (COMPRAS_SEQ.NEXTVAL, ID_PROVEEDOR_IN, FECHA_IN, ESTADO_IN, 0)
    RETURNING ID_COMPRA INTO ID_COMPRA_OUT;
END;

/
--------------------------------------------------------
--  DDL for Procedure CREAR_ALERTA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."CREAR_ALERTA" (
    p_tipo IN VARCHAR2,
    p_mensaje IN VARCHAR2
) AS
BEGIN
    INSERT INTO Alertas (tipo, mensaje, fecha) VALUES (p_tipo, p_mensaje, SYSDATE);
    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure CREAR_CALIDAD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."CREAR_CALIDAD" (
    descripcion in VARCHAR,
    id_producto in number
)
AS

BEGIN

    insert into calidad(descripcion, id_producto)
    values (descripcion,id_producto);

END crear_calidad;


/
--------------------------------------------------------
--  DDL for Procedure CREAR_CATEGORIA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."CREAR_CATEGORIA" (
    Nombre in VARCHAR
)
AS

BEGIN

    insert into categorias(nombre)
    values (nombre);

END crear_categoria;


/
--------------------------------------------------------
--  DDL for Procedure CREAR_CLIENTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."CREAR_CLIENTE" (
    p_nombre IN VARCHAR2,
    p_contacto IN VARCHAR2,
    p_direccion IN VARCHAR2
) AS
BEGIN
    INSERT INTO Clientes (nombre, contacto, direccion) VALUES (p_nombre, p_contacto, p_direccion);
    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure CREAR_COMPRA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."CREAR_COMPRA" (
    p_id_proveedor IN NUMBER,
    p_total IN NUMBER
) AS
BEGIN
    INSERT INTO Compras (id_proveedor, fecha_compra, total) VALUES (p_id_proveedor, SYSDATE, p_total);
    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure CREAR_DETALLE_COMPRA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."CREAR_DETALLE_COMPRA" (
    p_id_compra IN NUMBER,
    p_id_producto IN NUMBER,
    p_cantidad IN NUMBER,
    p_precio_unitario IN NUMBER
) AS
BEGIN
    INSERT INTO "USER_JAVA"."DETALLE_COMPRAS" 
    ("ID_COMPRA", "ID_PRODUCTO", "CANTIDAD", "PRECIO_UNITARIO")
    VALUES (p_id_compra, p_id_producto, p_cantidad, p_precio_unitario);

    COMMIT;
END CREAR_DETALLE_COMPRA;

/
--------------------------------------------------------
--  DDL for Procedure CREAR_DETALLE_VENTA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."CREAR_DETALLE_VENTA" (
    p_id_venta IN NUMBER,
    p_id_producto IN NUMBER,
    p_cantidad IN NUMBER,
    p_precio_unitario IN NUMBER
) AS
BEGIN
    INSERT INTO "USER_JAVA"."DETALLE_VENTAS" 
    ("ID_VENTA", "ID_PRODUCTO", "CANTIDAD", "PRECIO_UNITARIO")
    VALUES (p_id_venta, p_id_producto, p_cantidad, p_precio_unitario);

    COMMIT;
END crear_detalle_venta;


/
--------------------------------------------------------
--  DDL for Procedure CREAR_DEVOLUCION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."CREAR_DEVOLUCION" (
    p_id_producto IN NUMBER,
    p_id_cliente IN NUMBER,
    p_id_orden IN NUMBER,
    p_motivo IN VARCHAR2,
    p_cantidad IN NUMBER
) AS
BEGIN
    INSERT INTO Devoluciones (id_producto, id_orden, id_cliente, motivo, cantidad) 
    VALUES (p_id_producto, p_id_orden, p_id_cliente, p_motivo, p_cantidad);
    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure CREAR_GASTO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."CREAR_GASTO" (
    p_descripcion IN VARCHAR2,
    p_monto IN NUMBER,
    p_fecha IN DATE DEFAULT SYSDATE
) AS
BEGIN
    INSERT INTO "USER_JAVA"."GASTOS" 
    ("DESCRIPCION", "MONTO", "FECHA")
    VALUES (p_descripcion, p_monto, p_fecha);

    COMMIT;
END crear_gasto;


/
--------------------------------------------------------
--  DDL for Procedure CREAR_HISTORIAL_PRECIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."CREAR_HISTORIAL_PRECIO" (
    p_id_producto IN NUMBER,
    p_precio_anterior IN NUMBER,
    p_precio_nuevo IN NUMBER,
    p_fecha_cambio IN DATE DEFAULT SYSDATE
) AS
BEGIN
    INSERT INTO "USER_JAVA"."HISTORIAL_PRECIOS" 
    ("ID_PRODUCTO", "PRECIO_ANTERIOR", "PRECIO_NUEVO", "FECHA_CAMBIO")
    VALUES (p_id_producto, p_precio_anterior, p_precio_nuevo, p_fecha_cambio);

    COMMIT;
END crear_historial_precio;


/
--------------------------------------------------------
--  DDL for Procedure CREAR_HISTORIAL_STOCK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."CREAR_HISTORIAL_STOCK" (
    p_id_producto IN NUMBER,
    p_cantidad_anterior IN NUMBER,
    p_cantidad_nueva IN NUMBER
) AS
BEGIN
    INSERT INTO Historial_Stock (id_producto, cantidad_anterior, cantidad_nueva, fecha_cambio) 
    VALUES (p_id_producto, p_cantidad_anterior, p_cantidad_nueva, SYSDATE);
    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure CREAR_INVENTARIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."CREAR_INVENTARIO" (
    p_id_producto IN NUMBER,
    p_stock IN NUMBER
) AS
BEGIN
    INSERT INTO "USER_JAVA"."INVENTARIO" 
    ("ID_PRODUCTO", "STOCK")
    VALUES (p_id_producto, p_stock);

    COMMIT;
END crear_inventario;
/
--------------------------------------------------------
--  DDL for Procedure CREAR_LOG
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."CREAR_LOG" (
    p_id_usuario IN NUMBER,
    p_accion IN VARCHAR2,
    p_fecha IN DATE DEFAULT SYSDATE
) AS
BEGIN
    INSERT INTO "USER_JAVA"."LOGS" 
    ("ID_USUARIO", "ACCION", "FECHA")
    VALUES (p_id_usuario, p_accion, p_fecha);

    COMMIT;
END crear_log;
/
--------------------------------------------------------
--  DDL for Procedure CREAR_PAGO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."CREAR_PAGO" (
    p_id_venta IN NUMBER,
    p_metodo_pago IN VARCHAR2,
    p_monto IN NUMBER
) AS
BEGIN
    INSERT INTO "USER_JAVA"."PAGOS" 
    ("ID_VENTA", "METODO_PAGO", "MONTO")
    VALUES (p_id_venta, p_metodo_pago, p_monto);

    COMMIT;
END crear_pago;
/
--------------------------------------------------------
--  DDL for Procedure CREAR_PRODUCTO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."CREAR_PRODUCTO" (
    nombre VARCHAR2,
    categoria_id NUMBER,
    unidad number
) AS
BEGIN
    INSERT INTO Productos (nombre, id_categoria, id_unidad)
    VALUES (nombre, categoria_id, unidad);
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/
--------------------------------------------------------
--  DDL for Procedure CREAR_PROMOCION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."CREAR_PROMOCION" (
    p_id_producto IN NUMBER,
    p_descuento IN NUMBER,
    p_fecha_inicio IN DATE,
    p_fecha_fin IN DATE
) AS
BEGIN
    INSERT INTO "USER_JAVA"."PROMOCIONES" 
    ("ID_PRODUCTO", "DESCUENTO", "FECHA_INICIO", "FECHA_FIN")
    VALUES (p_id_producto, p_descuento, p_fecha_inicio, p_fecha_fin);

    COMMIT;
END crear_promocion;
/
--------------------------------------------------------
--  DDL for Procedure CREAR_PROVEEDOR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."CREAR_PROVEEDOR" (
    p_nombre IN VARCHAR2,
    p_contacto IN VARCHAR2,
    p_direccion IN VARCHAR2
) AS
BEGIN
    INSERT INTO Proveedores (nombre, contacto, direccion) VALUES (p_nombre, p_contacto, p_direccion);
    COMMIT;
END;
/
--------------------------------------------------------
--  DDL for Procedure CREAR_REPORTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."CREAR_REPORTE" (
    p_tipo IN VARCHAR2,
    p_descripcion IN VARCHAR2
) AS
BEGIN
    INSERT INTO "USER_JAVA"."REPORTES" 
    ("TIPO", "FECHA_GENERADO", "DESCRIPCION")
    VALUES (p_tipo, SYSDATE, p_descripcion);

    COMMIT;
END crear_reporte;
/
--------------------------------------------------------
--  DDL for Procedure CREAR_ROL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."CREAR_ROL" (
    p_nombre IN VARCHAR2
) AS
BEGIN
    INSERT INTO "USER_JAVA"."ROLES" ("NOMBRE")
    VALUES (p_nombre);

    COMMIT;
END crear_rol;
/
--------------------------------------------------------
--  DDL for Procedure CREAR_UNIDAD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."CREAR_UNIDAD" (
    p_nombre IN VARCHAR2
) AS
BEGIN
    INSERT INTO "USER_JAVA"."UNIDADES" ("NOMBRE")
    VALUES (p_nombre);

    COMMIT;
END crear_unidad;
/
--------------------------------------------------------
--  DDL for Procedure CREAR_USUARIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."CREAR_USUARIO" (
    p_nombre IN VARCHAR2,
    p_correo IN VARCHAR2,
    p_contraseña IN VARCHAR2,
    p_id_rol IN NUMBER
) AS
    v_count NUMBER;
BEGIN
    -- Validar si el rol existe
    SELECT COUNT(*) INTO v_count FROM ROLES WHERE ID_ROL = p_id_rol;
    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'El rol especificado no existe.');
    END IF;

    -- Intentar insertar el usuario con la contraseña hasheada
    INSERT INTO USUARIOS (NOMBRE, CORREO, CONTRASENA, ID_ROL)
    VALUES (p_nombre, p_correo, STANDARD_HASH(p_contraseña, 'SHA256'), p_id_rol);

    COMMIT;
EXCEPTION
    -- Manejar duplicidad de correo
    WHEN DUP_VAL_ON_INDEX THEN
        RAISE_APPLICATION_ERROR(-20002, 'El correo ya está registrado.');
    -- Capturar otros errores
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20003, 'Error al crear el usuario: ' || SQLERRM);
END CREAR_USUARIO;
/
--------------------------------------------------------
--  DDL for Procedure CREAR_VENTA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."CREAR_VENTA" (
    p_id_cliente IN NUMBER,
    p_total IN NUMBER
) AS
BEGIN
    INSERT INTO Ventas (id_cliente, fecha_venta, total) VALUES (p_id_cliente, SYSDATE, p_total);
    COMMIT;
END;
/
--------------------------------------------------------
--  DDL for Procedure EDITAR_ALERTA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."EDITAR_ALERTA" (
    a_id      IN NUMBER,
    a_tipo    IN VARCHAR2,
    a_mensaje IN VARCHAR2
) IS
BEGIN
    UPDATE alertas
    SET
        tipo = a_tipo,
        mensaje = a_mensaje
    WHERE
        id_alerta = a_id;

    -- Verificar si se actualizó algún registro
    IF SQL%rowcount = 0 THEN
        RAISE no_data_found;
    END IF;
    dbms_output.put_line('Alerta con ID '
                         || a_id
                         || ' actualizada correctamente.');
EXCEPTION
    WHEN no_data_found THEN
        dbms_output.put_line('No se encontró la alerta con ID ' || a_id);
    WHEN OTHERS THEN
        dbms_output.put_line('Error: ' || sqlerrm);
END editar_alerta;
/
--------------------------------------------------------
--  DDL for Procedure EDITAR_CALIDAD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."EDITAR_CALIDAD" (
    c_id IN NUMBER,
    c_descripcion IN VARCHAR2,
    c_id_producto IN number
)
IS
BEGIN
    UPDATE calidad
    SET descripcion = c_descripcion, 
        id_producto = c_id_producto
    WHERE id_calidad = c_id;

    -- Verificar si se actualizó algún registro
    IF SQL%ROWCOUNT = 0 THEN
        RAISE NO_DATA_FOUND;
    END IF;

    DBMS_OUTPUT.PUT_LINE('Categoría con ID ' || c_id || ' actualizada correctamente.');

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No se encontró la categoría con ID ' || c_id);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END editar_calidad;
/
--------------------------------------------------------
--  DDL for Procedure EDITAR_CATEGORIA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."EDITAR_CATEGORIA" (
    c_id IN NUMBER,
    c_nombre IN VARCHAR2,
    c_descripcion IN VARCHAR2
)
IS
BEGIN
    UPDATE categorias
    SET nombre = c_nombre, 
        descripcion = c_descripcion
    WHERE id_categoria = c_id;

    -- Verificar si se actualizó algún registro
    IF SQL%ROWCOUNT = 0 THEN
        RAISE NO_DATA_FOUND;
    END IF;

    DBMS_OUTPUT.PUT_LINE('Categoría con ID ' || c_id || ' actualizada correctamente.');

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No se encontró la categoría con ID ' || c_id);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END editar_categoria;
/
--------------------------------------------------------
--  DDL for Procedure EDITAR_CLIENTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."EDITAR_CLIENTE" (
    p_id_cliente IN NUMBER,
    p_nombre IN VARCHAR2,
    p_contacto IN VARCHAR2,
    p_direccion IN VARCHAR2
) AS
BEGIN
    UPDATE Clientes SET nombre = p_nombre, contacto = p_contacto, direccion = p_direccion WHERE id_cliente = p_id_cliente;
    COMMIT;
END;
/
--------------------------------------------------------
--  DDL for Procedure EDITAR_COMPRA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."EDITAR_COMPRA" (
    p_id_compra IN NUMBER,
    p_id_proveedor IN NUMBER,
    p_total IN NUMBER
) AS
BEGIN
    UPDATE Compras SET id_proveedor = p_id_proveedor, total = p_total WHERE id_compra = p_id_compra;
    COMMIT;
END;
/
--------------------------------------------------------
--  DDL for Procedure EDITAR_DETALLE_COMPRA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."EDITAR_DETALLE_COMPRA" (
    p_id_detalle_compra IN NUMBER,
    p_id_compra IN NUMBER,
    p_id_producto IN NUMBER,
    p_cantidad IN NUMBER,
    p_precio_unitario IN NUMBER
) AS
BEGIN
    UPDATE "USER_JAVA"."DETALLE_COMPRAS"
    SET 
        "ID_COMPRA" = p_id_compra, 
        "ID_PRODUCTO" = p_id_producto,
        "CANTIDAD" = p_cantidad,
        "PRECIO_UNITARIO" = p_precio_unitario
    WHERE "ID_DETALLE_COMPRA" = p_id_detalle_compra;

    COMMIT;
END editar_detalle_compra;
/
--------------------------------------------------------
--  DDL for Procedure EDITAR_DETALLE_VENTA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."EDITAR_DETALLE_VENTA" (
    p_id_detalle_venta IN NUMBER,
    p_id_venta IN NUMBER,
    p_id_producto IN NUMBER,
    p_cantidad IN NUMBER,
    p_precio_unitario IN NUMBER
) AS
BEGIN
    UPDATE "USER_JAVA"."DETALLE_VENTAS"
    SET 
        "ID_VENTA" = p_id_venta, 
        "ID_PRODUCTO" = p_id_producto,
        "CANTIDAD" = p_cantidad,
        "PRECIO_UNITARIO" = p_precio_unitario
    WHERE "ID_DETALLE_VENTA" = p_id_detalle_venta;

    COMMIT;
END editar_detalle_venta;
/
--------------------------------------------------------
--  DDL for Procedure EDITAR_DEVOLUCION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."EDITAR_DEVOLUCION" (
    p_id_devolucion IN NUMBER,
    p_id_producto IN NUMBER,
    p_id_orden IN NUMBER,
    p_id_cliente IN NUMBER,
    p_motivo IN VARCHAR2,
    p_cantidad IN NUMBER
) AS
BEGIN
    UPDATE "USER_JAVA"."DEVOLUCIONES"
    SET 
        "ID_PRODUCTO" = p_id_producto, 
        "ID_ORDEN" = p_id_orden,
        "ID_CLIENTE" = p_id_cliente,
        "MOTIVO" = p_motivo,
        "CANTIDAD" = p_cantidad
    WHERE "ID_DEVOLUCION" = p_id_devolucion;

    COMMIT;
END editar_devolucion;
/
--------------------------------------------------------
--  DDL for Procedure EDITAR_GASTO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."EDITAR_GASTO" (
    p_id_gasto IN NUMBER,
    p_descripcion IN VARCHAR2,
    p_monto IN NUMBER,
    p_fecha IN DATE
) AS
BEGIN
    UPDATE "USER_JAVA"."GASTOS"
    SET 
        "DESCRIPCION" = p_descripcion, 
        "MONTO" = p_monto,
        "FECHA" = p_fecha
    WHERE "ID_GASTO" = p_id_gasto;

    COMMIT;
END editar_gasto;
/
--------------------------------------------------------
--  DDL for Procedure EDITAR_HISTORIAL_PRECIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."EDITAR_HISTORIAL_PRECIO" (
    p_id_historial IN NUMBER,
    p_id_producto IN NUMBER,
    p_precio_anterior IN NUMBER,
    p_precio_nuevo IN NUMBER,
    p_fecha_cambio IN DATE
) AS
BEGIN
    UPDATE "USER_JAVA"."HISTORIAL_PRECIOS"
    SET 
        "ID_PRODUCTO" = p_id_producto, 
        "PRECIO_ANTERIOR" = p_precio_anterior,
        "PRECIO_NUEVO" = p_precio_nuevo,
        "FECHA_CAMBIO" = p_fecha_cambio
    WHERE "ID_HISTORIAL" = p_id_historial;

    COMMIT;
END editar_historial_precio;
/
--------------------------------------------------------
--  DDL for Procedure EDITAR_HISTORIAL_STOCK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."EDITAR_HISTORIAL_STOCK" (
    p_id_historial IN NUMBER,
    p_id_producto IN NUMBER,
    p_cantidad_anterior IN NUMBER,
    p_cantidad_nueva IN NUMBER,
    p_fecha_cambio IN DATE
) AS
BEGIN
    UPDATE "USER_JAVA"."HISTORIAL_STOCK"
    SET 
        "ID_PRODUCTO" = p_id_producto, 
        "CANTIDAD_ANTERIOR" = p_cantidad_anterior,
        "CANTIDAD_NUEVA" = p_cantidad_nueva,
        "FECHA_CAMBIO" = p_fecha_cambio
    WHERE "ID_HISTORIAL" = p_id_historial;

    COMMIT;
END editar_historial_stock;
/
--------------------------------------------------------
--  DDL for Procedure EDITAR_INVENTARIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."EDITAR_INVENTARIO" (
    p_id_inventario IN NUMBER,
    p_id_producto IN NUMBER,
    p_stock IN NUMBER
) AS
BEGIN
    UPDATE "USER_JAVA"."INVENTARIO"
    SET 
        "ID_PRODUCTO" = p_id_producto, 
        "STOCK" = p_stock
    WHERE "ID_INVENTARIO" = p_id_inventario;

    COMMIT;
END editar_inventario;
/

--------------------------------------------------------
--  DDL for Procedure EDITAR_LOG
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."EDITAR_LOG" (
    p_id_log IN NUMBER,
    p_id_usuario IN NUMBER,
    p_accion IN VARCHAR2,
    p_fecha IN DATE
) AS
BEGIN
    UPDATE "USER_JAVA"."LOGS"
    SET 
        "ID_USUARIO" = p_id_usuario, 
        "ACCION" = p_accion,
        "FECHA" = p_fecha
    WHERE "ID_LOG" = p_id_log;

    COMMIT;
END editar_log;


/
--------------------------------------------------------
--  DDL for Procedure EDITAR_PAGO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."EDITAR_PAGO" (
    p_id_pago IN NUMBER,
    p_id_venta IN NUMBER,
    p_metodo_pago IN VARCHAR2,
    p_monto IN NUMBER
) AS
BEGIN
    UPDATE "USER_JAVA"."PAGOS"
    SET 
        "ID_VENTA" = p_id_venta, 
        "METODO_PAGO" = p_metodo_pago,
        "MONTO" = p_monto
    WHERE "ID_PAGO" = p_id_pago;

    COMMIT;
END editar_pago;


/
--------------------------------------------------------
--  DDL for Procedure EDITAR_PRODUCTO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."EDITAR_PRODUCTO" (
    p_id_producto IN NUMBER,
    p_nombre IN VARCHAR2,
    p_id_categoria IN NUMBER,
    p_id_unidad IN NUMBER
) AS
BEGIN
    -- Intentar actualizar el producto
    UPDATE USER_JAVA.PRODUCTOS
    SET nombre = p_nombre, 
        id_categoria = p_id_categoria, 
        id_unidad = p_id_unidad
    WHERE id_producto = p_id_producto;

    -- Si no se modificó ninguna fila, lanzar una excepción
    IF SQL%ROWCOUNT = 0 THEN
        RAISE NO_DATA_FOUND;
    END IF;

EXCEPTION
    -- Manejo de error si el producto no existe
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20003, 'No se encontró el producto con ID ' || p_id_producto);

    -- Manejo de cualquier otro error
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20004, 'Error al editar producto: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
END editar_producto;

/
--------------------------------------------------------
--  DDL for Procedure EDITAR_PROMOCION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."EDITAR_PROMOCION" (
    p_id_promocion IN NUMBER,
    p_id_producto IN NUMBER,
    p_descuento IN NUMBER,
    p_fecha_inicio IN DATE,
    p_fecha_fin IN DATE
) AS
BEGIN
    UPDATE "USER_JAVA"."PROMOCIONES"
    SET 
        "ID_PRODUCTO" = p_id_producto, 
        "DESCUENTO" = p_descuento,
        "FECHA_INICIO" = p_fecha_inicio,
        "FECHA_FIN" = p_fecha_fin
    WHERE "ID_PROMOCION" = p_id_promocion;

    COMMIT;
END editar_promocion;


/
--------------------------------------------------------
--  DDL for Procedure EDITAR_PROVEEDOR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."EDITAR_PROVEEDOR" (
    p_id_proveedor IN NUMBER,
    p_nombre IN VARCHAR2,
    p_contacto IN VARCHAR2,
    p_direccion IN VARCHAR2
) AS
BEGIN
    UPDATE Proveedores SET nombre = p_nombre, contacto = p_contacto, direccion = p_direccion WHERE id_proveedor = p_id_proveedor;
    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure EDITAR_REPORTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."EDITAR_REPORTE" (
    p_id_reporte IN NUMBER,
    p_tipo IN VARCHAR2,
    p_descripcion IN VARCHAR2
) AS
BEGIN
    UPDATE "USER_JAVA"."REPORTES"
    SET "TIPO" = p_tipo, 
        "DESCRIPCION" = p_descripcion
    WHERE "ID_REPORTE" = p_id_reporte;

    COMMIT;
END editar_reporte;


/
--------------------------------------------------------
--  DDL for Procedure EDITAR_ROL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."EDITAR_ROL" (
    p_id_rol IN NUMBER,
    p_nombre IN VARCHAR2
) AS
BEGIN
    UPDATE "USER_JAVA"."ROLES"
    SET "NOMBRE" = p_nombre
    WHERE "ID_ROL" = p_id_rol;

    COMMIT;
END editar_rol;


/
--------------------------------------------------------
--  DDL for Procedure EDITAR_UNIDAD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."EDITAR_UNIDAD" (
    p_id_unidad IN NUMBER,
    p_nombre IN VARCHAR2
) AS
BEGIN
    UPDATE "USER_JAVA"."UNIDADES"
    SET "NOMBRE" = p_nombre
    WHERE "ID_UNIDAD" = p_id_unidad;

    COMMIT;
END editar_unidad;


/
--------------------------------------------------------
--  DDL for Procedure EDITAR_USUARIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."EDITAR_USUARIO" (
    p_id_usuario IN NUMBER,
    p_nombre IN VARCHAR2,
    p_correo IN VARCHAR2,
    p_contraseña IN VARCHAR2,
    p_id_rol IN NUMBER
) AS
    v_count NUMBER;
BEGIN
    -- Validar si el usuario existe
    SELECT COUNT(*) INTO v_count FROM USUARIOS WHERE ID_USUARIO = p_id_usuario;
    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, '❌ El usuario no existe.');
    END IF;

    -- Validar si el rol existe
    SELECT COUNT(*) INTO v_count FROM ROLES WHERE ID_ROL = p_id_rol;
    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20002, '❌ El rol especificado no existe.');
    END IF;

    -- Validar si el nuevo correo ya pertenece a otro usuario
    SELECT COUNT(*) INTO v_count FROM USUARIOS WHERE CORREO = p_correo AND ID_USUARIO <> p_id_usuario;
    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20003, '❌ El correo ya está en uso por otro usuario.');
    END IF;

    -- Actualizar usuario
    UPDATE USUARIOS
    SET NOMBRE = p_nombre,
        CORREO = p_correo,
        CONTRASENA = STANDARD_HASH(p_contraseña, 'SHA256'), -- Hasheo de la nueva contraseña
        ID_ROL = p_id_rol
    WHERE ID_USUARIO = p_id_usuario;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20004, '❌ Error al editar el usuario: ' || SQLERRM);
END EDITAR_USUARIO;

/
--------------------------------------------------------
--  DDL for Procedure EDITAR_VENTA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."EDITAR_VENTA" (
    p_id_venta IN NUMBER,
    p_id_cliente IN NUMBER,
    p_total IN NUMBER
) AS
BEGIN
    UPDATE Ventas SET id_cliente = p_id_cliente, total = p_total WHERE id_venta = p_id_venta;
    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_ALERTA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_ALERTA" (
    p_id_alerta IN NUMBER
) AS
BEGIN
    DELETE FROM alertas WHERE id_alerta = p_id_alerta;
    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_CALIDAD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_CALIDAD" (
    p_id_calidad IN NUMBER
) AS
BEGIN
    DELETE FROM calidad WHERE id_calidad = p_id_calidad;
    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_CATEGORIA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_CATEGORIA" (
    p_id_categoria IN NUMBER
) AS
BEGIN
    DELETE FROM Categorias WHERE id_categoria = p_id_categoria;
    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_CLIENTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_CLIENTE" (
    p_id_cliente IN NUMBER
) AS
BEGIN
    DELETE FROM Clientes WHERE id_cliente = p_id_cliente;
    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_COMPRA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_COMPRA" (
    p_id_compra IN NUMBER
) AS
BEGIN
    DELETE FROM Compras WHERE id_compra = p_id_compra;
    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_DETALLE_COMPRA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_DETALLE_COMPRA" (
    p_id_detalle_compra IN NUMBER
) AS
BEGIN
    DELETE FROM "USER_JAVA"."DETALLE_COMPRAS"
    WHERE "ID_DETALLE_COMPRA" = p_id_detalle_compra;

    COMMIT;
END eliminar_detalle_compra;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_DETALLE_VENTA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_DETALLE_VENTA" (
    p_id_detalle_venta IN NUMBER
) AS
BEGIN
    DELETE FROM "USER_JAVA"."DETALLE_VENTAS"
    WHERE "ID_DETALLE_VENTA" = p_id_detalle_venta;

    COMMIT;
END eliminar_detalle_venta;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_DEVOLUCION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_DEVOLUCION" (
    p_id_devolucion IN NUMBER
) AS
BEGIN
    DELETE FROM Devoluciones WHERE id_devolucion = p_id_devolucion;
    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_GASTO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_GASTO" (
    p_id_gasto IN NUMBER
) AS
BEGIN
    DELETE FROM "USER_JAVA"."GASTOS"
    WHERE "ID_GASTO" = p_id_gasto;

    COMMIT;
END eliminar_gasto;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_HISTORIAL_PRECIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_HISTORIAL_PRECIO" (
    p_id_historial IN NUMBER
) AS
BEGIN
    DELETE FROM "USER_JAVA"."HISTORIAL_PRECIOS"
    WHERE "ID_HISTORIAL" = p_id_historial;

    COMMIT;
END eliminar_historial_precio;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_HISTORIAL_STOCK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_HISTORIAL_STOCK" (
    p_id_historial IN NUMBER
) AS
BEGIN
    DELETE FROM "USER_JAVA"."HISTORIAL_STOCK"
    WHERE "ID_HISTORIAL" = p_id_historial;

    COMMIT;
END eliminar_historial_stock;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_INVENTARIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_INVENTARIO" (
    p_id_inventario IN NUMBER
) AS
BEGIN
    -- Eliminar el registro con el ID proporcionado
    DELETE FROM INVENTARIO
    WHERE ID_INVENTARIO = p_id_inventario;

    -- Confirmar los cambios
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        -- Manejo de errores
        RAISE_APPLICATION_ERROR(-20001, 'Error al eliminar el inventario: ' || SQLERRM);
END ELIMINAR_INVENTARIO;

/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_LOG
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_LOG" (
    p_id_log IN NUMBER
) AS
BEGIN
    DELETE FROM "USER_JAVA"."LOGS"
    WHERE "ID_LOG" = p_id_log;

    COMMIT;
END eliminar_log;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_ORDEN_COMPRA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_ORDEN_COMPRA" (
    ID_COMPRA_IN IN NUMBER
) AS
BEGIN
    DELETE FROM COMPRAS WHERE ID_COMPRA = ID_COMPRA_IN;
END;

/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_PAGO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_PAGO" (
    p_id_pago IN NUMBER
) AS
BEGIN
    DELETE FROM "USER_JAVA"."PAGOS"
    WHERE "ID_PAGO" = p_id_pago;

    COMMIT;
END eliminar_pago;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_PRODUCTO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_PRODUCTO" (
    p_id IN NUMBER
) AS
BEGIN
    -- Intentar eliminar el producto
    DELETE FROM USER_JAVA.PRODUCTOS WHERE ID_PRODUCTO = p_id;

    -- Si no se eliminó ninguna fila, lanzar una excepción
    IF SQL%ROWCOUNT = 0 THEN
        RAISE NO_DATA_FOUND;
    END IF;

EXCEPTION
    -- Manejo de error si el producto no existe
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20001, 'No se encontró el producto con ID ' || p_id);

    -- Manejo de cualquier otro error
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'Error al eliminar producto: ' || DBMS_UTILITY.FORMAT_ERROR_STACK);
END eliminar_producto;

/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_PROMOCION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_PROMOCION" (
    p_id_promocion IN NUMBER
) AS
BEGIN
    DELETE FROM "USER_JAVA"."PROMOCIONES"
    WHERE "ID_PROMOCION" = p_id_promocion;

    COMMIT;
END eliminar_promocion;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_PROVEEDOR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_PROVEEDOR" (
    p_id_proveedor IN NUMBER
) AS
BEGIN
    DELETE FROM Proveedores WHERE id_proveedor = p_id_proveedor;
    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_REPORTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_REPORTE" (
    p_id_reporte IN NUMBER
) AS
BEGIN
    DELETE FROM "USER_JAVA"."REPORTES"
    WHERE "ID_REPORTE" = p_id_reporte;

    COMMIT;
END eliminar_reporte;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_ROL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_ROL" (
    p_id_rol IN NUMBER
) AS
BEGIN
    DELETE FROM "USER_JAVA"."ROLES"
    WHERE "ID_ROL" = p_id_rol;

    COMMIT;
END eliminar_rol;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_UNIDAD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_UNIDAD" (
    p_id_unidad IN NUMBER
) AS
BEGIN
    DELETE FROM "USER_JAVA"."UNIDADES"
    WHERE "ID_UNIDAD" = p_id_unidad;

    COMMIT;
END eliminar_unidad;


/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_USUARIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_USUARIO" (
    p_id_usuario IN NUMBER
) AS
    v_count NUMBER;
BEGIN
    -- Validar si el usuario existe antes de eliminarlo
    SELECT COUNT(*) INTO v_count FROM USUARIOS WHERE ID_USUARIO = p_id_usuario;
    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20001, '❌ El usuario no existe.');
    END IF;

    -- Eliminar el usuario
    DELETE FROM USUARIOS WHERE ID_USUARIO = p_id_usuario;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20002, '❌ Error al eliminar el usuario: ' || SQLERRM);
END ELIMINAR_USUARIO;

/
--------------------------------------------------------
--  DDL for Procedure ELIMINAR_VENTA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."ELIMINAR_VENTA" (
    p_id_venta IN NUMBER
) AS
BEGIN
    DELETE FROM Ventas WHERE id_venta = p_id_venta;
    COMMIT;
END;


/
--------------------------------------------------------
--  DDL for Procedure INSERTAR_ORDEN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."INSERTAR_ORDEN" (
    P_ID_PROVEEDOR IN NUMBER,
    P_TOTAL IN NUMBER,
    P_ID_ESTADO IN NUMBER DEFAULT 1, -- Por defecto el estado será 'Pendiente'
    P_ID_COMPRA OUT NUMBER           -- Devolverá el ID de la compra creada
) AS
BEGIN
    INSERT INTO COMPRAS (ID_COMPRA, ID_PROVEEDOR, TOTAL, ID_ESTADO)
    VALUES (COMPRAS_SEQ.NEXTVAL, P_ID_PROVEEDOR, P_TOTAL, P_ID_ESTADO)
    RETURNING ID_COMPRA INTO P_ID_COMPRA;
END;

/
--------------------------------------------------------
--  DDL for Procedure OBTENER_ALERTA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."OBTENER_ALERTA" (
    id_c IN NUMBER
)
IS
    v_id_alerta  alertas.id_alerta%TYPE;
    v_tipo        alertas.tipo%TYPE;
    v_mensaje   alertas.mensaje%TYPE;
BEGIN
    SELECT id_alerta, tipo, mensaje
    INTO v_id_alerta, v_tipo, v_mensaje
    FROM alertas
    WHERE id_alerta = id_c;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No se encontró la alerta con ID ' || id_c);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END obtener_alerta;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_CALIDAD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."OBTENER_CALIDAD" (
    id_c IN NUMBER
)
IS
    v_id_calidad  calidad.id_calidad%TYPE;
    v_id_producto        calidad.id_producto%type;
    v_descripcion   calidad.descripcion%TYPE;
BEGIN
    SELECT id_calidad, id_producto, descripcion
    INTO v_id_calidad, v_id_producto, v_descripcion
    FROM calidad
    WHERE id_calidad = id_c;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No se encontró la categoría con ID ' || id_c);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END obtener_calidad;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_CATEGORIA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."OBTENER_CATEGORIA" (
    id_c IN NUMBER
)
IS
    v_id_categoria  categorias.id_categoria%TYPE;
    v_nombre        categorias.nombre%TYPE;
    v_descripcion   categorias.descripcion%TYPE;
BEGIN
    SELECT id_categoria, nombre, descripcion
    INTO v_id_categoria, v_nombre, v_descripcion
    FROM categorias
    WHERE id_categoria = id_c;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No se encontró la categoría con ID ' || id_c);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END obtener_categoria;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_CLIENTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."OBTENER_CLIENTE" (
    p_id_cliente IN NUMBER
) AS
BEGIN
    FOR rec IN (SELECT * FROM Clientes WHERE id_cliente = p_id_cliente) LOOP
        DBMS_OUTPUT.PUT_LINE('ID: ' || rec.id_cliente || ' - Nombre: ' || rec.nombre);
    END LOOP;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_COMPRA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."OBTENER_COMPRA" (
    p_id_compra IN NUMBER
) AS
BEGIN
    FOR rec IN (SELECT * FROM Compras WHERE id_compra = p_id_compra) LOOP
        DBMS_OUTPUT.PUT_LINE('ID: ' || rec.id_compra || ' - Proveedor: ' || rec.id_proveedor || ' - Total: ' || rec.total);
    END LOOP;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_DETALLE_COMPRA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."OBTENER_DETALLE_COMPRA" (
    p_id_detalle_compra IN NUMBER
) AS
BEGIN
    FOR rec IN (
        SELECT * 
        FROM "USER_JAVA"."DETALLE_COMPRAS"
        WHERE "ID_DETALLE_COMPRA" = p_id_detalle_compra
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('ID_DETALLE_COMPRA: ' || rec.ID_DETALLE_COMPRA || 
                             ', ID_COMPRA: ' || rec.ID_COMPRA || 
                             ', ID_PRODUCTO: ' || rec.ID_PRODUCTO || 
                             ', CANTIDAD: ' || rec.CANTIDAD || 
                             ', PRECIO_UNITARIO: ' || rec.PRECIO_UNITARIO);
    END LOOP;
END obtener_detalle_compra;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_DETALLE_VENTA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."OBTENER_DETALLE_VENTA" (
    p_id_detalle_venta IN NUMBER
) AS
BEGIN
    FOR rec IN (
        SELECT * 
        FROM "USER_JAVA"."DETALLE_VENTAS"
        WHERE "ID_DETALLE_VENTA" = p_id_detalle_venta
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('ID_DETALLE_VENTA: ' || rec.ID_DETALLE_VENTA || 
                             ', ID_VENTA: ' || rec.ID_VENTA || 
                             ', ID_PRODUCTO: ' || rec.ID_PRODUCTO || 
                             ', CANTIDAD: ' || rec.CANTIDAD || 
                             ', PRECIO_UNITARIO: ' || rec.PRECIO_UNITARIO);
    END LOOP;
END obtener_detalle_venta;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_DEVOLUCION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."OBTENER_DEVOLUCION" (
    p_id_devolucion IN NUMBER
) AS
BEGIN
    FOR rec IN (SELECT * FROM Devoluciones WHERE id_devolucion = p_id_devolucion) LOOP
        DBMS_OUTPUT.PUT_LINE('ID: ' || rec.id_devolucion || ' - Producto: ' || rec.id_producto || ' - Cliente: ' || rec.id_cliente || ' - Orden: ' || rec.id_orden);
    END LOOP;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_GASTO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."OBTENER_GASTO" (
    p_id_gasto IN NUMBER
) AS
BEGIN
    FOR rec IN (
        SELECT * 
        FROM "USER_JAVA"."GASTOS"
        WHERE "ID_GASTO" = p_id_gasto
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('ID_GASTO: ' || rec.ID_GASTO || 
                             ', DESCRIPCION: ' || rec.DESCRIPCION || 
                             ', MONTO: ' || rec.MONTO || 
                             ', FECHA: ' || rec.FECHA);
    END LOOP;
END obtener_gasto;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_HISTORIAL_PRECIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."OBTENER_HISTORIAL_PRECIO" (
    p_id_historial IN NUMBER
) AS
BEGIN
    FOR rec IN (
        SELECT * 
        FROM "USER_JAVA"."HISTORIAL_PRECIOS"
        WHERE "ID_HISTORIAL" = p_id_historial
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('ID_HISTORIAL: ' || rec.ID_HISTORIAL || 
                             ', ID_PRODUCTO: ' || rec.ID_PRODUCTO || 
                             ', PRECIO_ANTERIOR: ' || rec.PRECIO_ANTERIOR || 
                             ', PRECIO_NUEVO: ' || rec.PRECIO_NUEVO || 
                             ', FECHA_CAMBIO: ' || rec.FECHA_CAMBIO);
    END LOOP;
END obtener_historial_precio;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_HISTORIAL_STOCK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."OBTENER_HISTORIAL_STOCK" (
    p_id_historial IN NUMBER
) AS
BEGIN
    FOR rec IN (
        SELECT * 
        FROM "USER_JAVA"."HISTORIAL_STOCK"
        WHERE "ID_HISTORIAL" = p_id_historial
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('ID_HISTORIAL: ' || rec.ID_HISTORIAL || 
                             ', ID_PRODUCTO: ' || rec.ID_PRODUCTO || 
                             ', CANTIDAD_ANTERIOR: ' || rec.CANTIDAD_ANTERIOR || 
                             ', CANTIDAD_NUEVA: ' || rec.CANTIDAD_NUEVA || 
                             ', FECHA_CAMBIO: ' || rec.FECHA_CAMBIO);
    END LOOP;
END obtener_historial_stock;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_INVENTARIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."OBTENER_INVENTARIO" (
    p_id_inventario IN NUMBER
) AS
BEGIN
    FOR rec IN (
        SELECT * 
        FROM "USER_JAVA"."INVENTARIO"
        WHERE "ID_INVENTARIO" = p_id_inventario
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('ID_INVENTARIO: ' || rec.ID_INVENTARIO || 
                             ', ID_PRODUCTO: ' || rec.ID_PRODUCTO || 
                             ', STOCK: ' || rec.STOCK);
    END LOOP;
END obtener_inventario;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_LOG
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."OBTENER_LOG" (
    p_id_log IN NUMBER
) AS
BEGIN
    FOR rec IN (
        SELECT * 
        FROM "USER_JAVA"."LOGS"
        WHERE "ID_LOG" = p_id_log
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('ID_LOG: ' || rec.ID_LOG || 
                             ', ID_USUARIO: ' || rec.ID_USUARIO || 
                             ', ACCION: ' || rec.ACCION || 
                             ', FECHA: ' || rec.FECHA);
    END LOOP;
END obtener_log;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_PAGO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."OBTENER_PAGO" (
    p_id_pago IN NUMBER
) AS
BEGIN
    FOR rec IN (
        SELECT * 
        FROM "USER_JAVA"."PAGOS"
        WHERE "ID_PAGO" = p_id_pago
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('ID_PAGO: ' || rec.ID_PAGO || 
                             ', ID_VENTA: ' || rec.ID_VENTA || 
                             ', METODO_PAGO: ' || rec.METODO_PAGO || 
                             ', MONTO: ' || rec.MONTO);
    END LOOP;
END obtener_pago;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_PRODUCTO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."OBTENER_PRODUCTO" (
    p_producto_id IN NUMBER,  -- Parámetro de entrada
    p_record OUT SYS_REFCURSOR  -- Cursor de salida para devolver los datos
) AS
BEGIN
    -- Abrimos el cursor con los datos correctos de la tabla "PRODUCTOS"
    OPEN p_record FOR
    SELECT id_producto, nombre, id_categoria, id_unidad, id_proveedor
    FROM user_java.productos
    WHERE id_producto = p_producto_id;

EXCEPTION
    WHEN OTHERS THEN
        -- Si ocurre un error, devolvemos un mensaje descriptivo del problema
        OPEN p_record FOR
        SELECT 'Error: ' || DBMS_UTILITY.FORMAT_ERROR_STACK AS mensaje FROM DUAL;
END obtener_producto;

/
--------------------------------------------------------
--  DDL for Procedure OBTENER_PROMOCION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."OBTENER_PROMOCION" (
    p_id_promocion IN NUMBER
) AS
BEGIN
    FOR rec IN (
        SELECT * 
        FROM "USER_JAVA"."PROMOCIONES"
        WHERE "ID_PROMOCION" = p_id_promocion
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('ID_PROMOCION: ' || rec.ID_PROMOCION || 
                             ', ID_PRODUCTO: ' || rec.ID_PRODUCTO || 
                             ', DESCUENTO: ' || rec.DESCUENTO || 
                             ', FECHA_INICIO: ' || rec.FECHA_INICIO || 
                             ', FECHA_FIN: ' || rec.FECHA_FIN);
    END LOOP;
END obtener_promocion;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_PROVEEDOR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."OBTENER_PROVEEDOR" (
    p_id_proveedor IN NUMBER
) AS
BEGIN
    FOR rec IN (SELECT * FROM Proveedores WHERE id_proveedor = p_id_proveedor) LOOP
        DBMS_OUTPUT.PUT_LINE('ID: ' || rec.id_proveedor || ' - Nombre: ' || rec.nombre);
    END LOOP;
END;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_REPORTE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."OBTENER_REPORTE" (
    p_id_reporte IN NUMBER
) AS
BEGIN
    FOR rec IN (
        SELECT * FROM "USER_JAVA"."REPORTES"
        WHERE "ID_REPORTE" = p_id_reporte
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('ID_REPORTE: ' || rec.ID_REPORTE ||
                             ', TIPO: ' || rec.TIPO ||
                             ', FECHA_GENERADO: ' || rec.FECHA_GENERADO ||
                             ', DESCRIPCION: ' || rec.DESCRIPCION);
    END LOOP;
END obtener_reporte;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_ROL
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."OBTENER_ROL" (
    p_id_rol IN NUMBER
) AS
BEGIN
    FOR rec IN (
        SELECT * FROM "USER_JAVA"."ROLES"
        WHERE "ID_ROL" = p_id_rol
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('ID_ROL: ' || rec.ID_ROL || ', NOMBRE: ' || rec.NOMBRE);
    END LOOP;
END obtener_rol;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_UNIDAD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."OBTENER_UNIDAD" (
    p_id_unidad IN NUMBER
) AS
BEGIN
    FOR rec IN (
        SELECT * FROM "USER_JAVA"."UNIDADES"
        WHERE "ID_UNIDAD" = p_id_unidad
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('ID_UNIDAD: ' || rec.ID_UNIDAD || ', NOMBRE: ' || rec.NOMBRE);
    END LOOP;
END obtener_unidad;


/
--------------------------------------------------------
--  DDL for Procedure OBTENER_USUARIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."OBTENER_USUARIO" (
    p_id_usuario IN NUMBER,
    p_resultado  OUT SYS_REFCURSOR  -- Cursor de salida para devolver los datos
) AS
BEGIN
    OPEN p_resultado FOR
        SELECT id_usuario, nombre, correo, id_rol
        FROM user_java.usuarios
        WHERE id_usuario = p_id_usuario;
END obtener_usuario;

/
--------------------------------------------------------
--  DDL for Procedure OBTENER_VENTA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."OBTENER_VENTA" (
    p_id_venta IN NUMBER
) AS
BEGIN
    FOR rec IN (SELECT * FROM Ventas WHERE id_venta = p_id_venta) LOOP
        DBMS_OUTPUT.PUT_LINE('ID: ' || rec.id_venta || ' - Cliente: ' || rec.id_cliente || ' - Total: ' || rec.total);
    END LOOP;
END;


/
--------------------------------------------------------
--  DDL for Procedure SP_MODIFICAR_STOCK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."SP_MODIFICAR_STOCK" (
    p_nombre_producto IN VARCHAR2, -- Nombre del producto
    p_cantidad IN NUMBER,          -- Cantidad a modificar
    p_operacion IN VARCHAR2        -- Operación: "AUMENTAR" o "DISMINUIR"
) AS
    v_id_producto NUMBER;
    v_stock_actual NUMBER;
    v_stock_nuevo NUMBER;
BEGIN
    -- Obtener ID del producto desde su nombre
    SELECT ID_PRODUCTO
    INTO v_id_producto
    FROM PRODUCTOS
    WHERE NOMBRE = p_nombre_producto;

    -- Obtener el stock actual (último registro en Historial_Stock)
    SELECT cantidad_nueva
    INTO v_stock_actual
    FROM Historial_Stock
    WHERE ID_PRODUCTO = v_id_producto
    ORDER BY fecha_cambio DESC
    FETCH FIRST 1 ROWS ONLY;

    -- Calcular el nuevo stock dependiendo de la operación
    IF p_operacion = 'AUMENTAR' THEN
        v_stock_nuevo := v_stock_actual + p_cantidad;
    ELSIF p_operacion = 'DISMINUIR' THEN
        IF v_stock_actual < p_cantidad THEN
            RAISE_APPLICATION_ERROR(-20001, 'ERROR: No hay suficiente stock disponible para completar la operación.');
        END IF;
        v_stock_nuevo := v_stock_actual - p_cantidad;
    ELSE
        RAISE_APPLICATION_ERROR(-20002, 'Operación inválida. Use "AUMENTAR" o "DISMINUIR".');
    END IF;

    -- Insertar registro en Historial_Stock para reflejar los cambios
    INSERT INTO Historial_Stock (ID_PRODUCTO, cantidad_anterior, cantidad_nueva, fecha_cambio)
    VALUES (v_id_producto, v_stock_actual, v_stock_nuevo, SYSDATE);

END;

/
--------------------------------------------------------
--  DDL for Procedure SP_OBTENER_INVENTARIO_POR_CATEGORIA
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."SP_OBTENER_INVENTARIO_POR_CATEGORIA" (
    p_nombre_categoria IN VARCHAR2, -- Nombre de la categoría deseada
    p_result OUT SYS_REFCURSOR     -- Cursor para retornar el resultado
) AS
BEGIN
    OPEN p_result FOR
    SELECT 
        p.ID_PRODUCTO,
        p.NOMBRE AS NOMBRE_PRODUCTO,
        c.NOMBRE AS NOMBRE_CATEGORIA,
        hs.cantidad_nueva AS STOCK,
        i.UBICACION          -- Ahora obtenemos la ubicación de la tabla INVENTARIO
    FROM PRODUCTOS p
    INNER JOIN CATEGORIAS c ON p.ID_CATEGORIA = c.ID_CATEGORIA
    INNER JOIN INVENTARIO i ON i.id_inventario = p.id_inventario
    INNER JOIN (
        -- Obtener solo el registro de stock más reciente
        SELECT ID_PRODUCTO, cantidad_nueva, fecha_cambio,
               ROW_NUMBER() OVER (PARTITION BY ID_PRODUCTO ORDER BY fecha_cambio DESC) AS rn
        FROM Historial_Stock
    ) hs ON hs.ID_PRODUCTO = p.ID_PRODUCTO AND hs.rn = 1
    WHERE c.NOMBRE = p_nombre_categoria; -- Filtramos por la categoría

END;

/
--------------------------------------------------------
--  DDL for Procedure SP_VALIDAR_ADMIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."SP_VALIDAR_ADMIN" (
    correo_v IN VARCHAR2,
    contrasena_v IN VARCHAR2,
    valido OUT NUMBER
) AS
    v_count NUMBER;
BEGIN
    -- Verificar si el usuario con correo y contraseña existe y tiene el rol de administrador (ID_ROL = 2)
    SELECT COUNT(*)
    INTO v_count
    FROM usuarios u
    JOIN roles r ON u.id_rol = r.id_rol
    WHERE u.correo = correo_v
    AND u.contrasena = contrasena_v
    AND r.id_rol = 2; -- 2 es el ID del rol de administrador

    -- Establecer el valor de "valido" según el resultado
    valido := CASE WHEN v_count > 0 THEN 1 ELSE 0 END;

EXCEPTION
    WHEN OTHERS THEN
        -- En caso de error, se asigna 0
        valido := 0; 
END sp_validar_admin;

/
--------------------------------------------------------
--  DDL for Procedure SP_VALIDAR_USUARIO
--------------------------------------------------------
set define off;

  CREATE OR REPLACE NONEDITIONABLE PROCEDURE "USER_JAVA"."SP_VALIDAR_USUARIO" (
    correo_v    IN  VARCHAR2,
    contrasena_v IN  VARCHAR2,
    valido      OUT NUMBER
) AS
    v_dummy NUMBER; 
BEGIN
    -- Verificar si existe un usuario con ese correo y contraseña
    SELECT 1 INTO v_dummy
    FROM usuarios
    WHERE correo = correo_v
    AND contrasena = contrasena_v
    FETCH FIRST 1 ROWS ONLY; -- Para evitar múltiples coincidencias innecesarias

    -- Si se encuentra el usuario, se asigna 1
    valido := 1;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        valido := 0; -- No se encontró el usuario
    WHEN OTHERS THEN
        valido := 0; -- Otro error
        -- Opcional: Registrar el error en un log
        -- DBMS_OUTPUT.PUT_LINE('Error en sp_validar_usuario: ' || SQLERRM);
END sp_validar_usuario;

/
--------------------------------------------------------
--  DDL for Package ALERTASPKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "USER_JAVA"."ALERTASPKG" AS
    PROCEDURE RegistrarAlerta(mensaje VARCHAR2);
    FUNCTION GetAlertasRecientes RETURN SYS_REFCURSOR;
END AlertasPkg;

/
--------------------------------------------------------
--  DDL for Package CATEGORIASPKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "USER_JAVA"."CATEGORIASPKG" AS
    FUNCTION GetNombreCategoria(id_categoria NUMBER) RETURN VARCHAR2;
END CategoriasPkg;

/
--------------------------------------------------------
--  DDL for Package CLIENTESPKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "USER_JAVA"."CLIENTESPKG" AS
    FUNCTION GetNombreCliente(id_cliente NUMBER) RETURN VARCHAR2;
    FUNCTION GetCantidadVentasCliente(id_cliente NUMBER) RETURN NUMBER;
END ClientesPkg;

/
--------------------------------------------------------
--  DDL for Package COMPRASPKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "USER_JAVA"."COMPRASPKG" AS
    FUNCTION GetTotalCompra(id_compra NUMBER) RETURN DECIMAL;
    FUNCTION CalcularDescuentoCompra(id_compra NUMBER) RETURN DECIMAL;
END ComprasPkg;

/
--------------------------------------------------------
--  DDL for Package INVENTARIOPKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "USER_JAVA"."INVENTARIOPKG" AS
    FUNCTION ActualizarStock(id_producto NUMBER, cantidad NUMBER) RETURN VARCHAR2;
    FUNCTION GetStockMinimoAlerta RETURN SYS_REFCURSOR;
END InventarioPkg;

/
--------------------------------------------------------
--  DDL for Package PROVEEDORESPKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "USER_JAVA"."PROVEEDORESPKG" AS
    FUNCTION GetNombreProveedor(id_proveedor NUMBER) RETURN VARCHAR2;
    FUNCTION GetCantidadComprasProveedor(id_proveedor NUMBER) RETURN NUMBER;
END ProveedoresPkg;

/
--------------------------------------------------------
--  DDL for Package REPORTESPKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "USER_JAVA"."REPORTESPKG" AS
    FUNCTION GetPromedioVentas RETURN DECIMAL;
    FUNCTION GetPromedioCompras RETURN DECIMAL;
END ReportesPkg;

/
--------------------------------------------------------
--  DDL for Package USUARIOSPKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "USER_JAVA"."USUARIOSPKG" AS
    FUNCTION ValidarUsuario(username VARCHAR2, password VARCHAR2) RETURN BOOLEAN;
    FUNCTION GetRolUsuario(id_usuario NUMBER) RETURN VARCHAR2;
END UsuariosPkg;

/
--------------------------------------------------------
--  DDL for Package VENTASPKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE "USER_JAVA"."VENTASPKG" AS
    FUNCTION GetTotalVenta(id_venta NUMBER) RETURN DECIMAL;
    FUNCTION CalcularImpuestoVenta(id_venta NUMBER) RETURN DECIMAL;
END VentasPkg;

/
--------------------------------------------------------
--  DDL for Package Body ALERTASPKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "USER_JAVA"."ALERTASPKG" AS
    PROCEDURE RegistrarAlerta(mensaje VARCHAR2) IS
    BEGIN
        INSERT INTO Alertas (mensaje, fecha) VALUES (mensaje, SYSDATE);
    END;

    FUNCTION GetAlertasRecientes RETURN SYS_REFCURSOR IS
        v_cursor SYS_REFCURSOR;
    BEGIN
        OPEN v_cursor FOR SELECT * FROM Alertas WHERE fecha > SYSDATE - 7;
        RETURN v_cursor;
    END;
END AlertasPkg;

/
--------------------------------------------------------
--  DDL for Package Body CATEGORIASPKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "USER_JAVA"."CATEGORIASPKG" AS
    FUNCTION GetNombreCategoria(id_categoria NUMBER) RETURN VARCHAR2 IS
        v_nombre VARCHAR2(100);
    BEGIN
        SELECT nombre INTO v_nombre FROM Categorias WHERE id_categoria = id_categoria;
        RETURN v_nombre;
    END;
END CategoriasPkg;

/
--------------------------------------------------------
--  DDL for Package Body CLIENTESPKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "USER_JAVA"."CLIENTESPKG" AS
    FUNCTION GetNombreCliente(id_cliente NUMBER) RETURN VARCHAR2 IS
        v_nombre VARCHAR2(100);
    BEGIN
        SELECT nombre INTO v_nombre FROM Clientes WHERE id_cliente = id_cliente;
        RETURN v_nombre;
    END;

    FUNCTION GetCantidadVentasCliente(id_cliente NUMBER) RETURN NUMBER IS
        v_cantidad NUMBER;
    BEGIN
        SELECT COUNT(*) INTO v_cantidad FROM Ventas WHERE id_cliente = id_cliente;
        RETURN v_cantidad;
    END;
END ClientesPkg;

/
--------------------------------------------------------
--  DDL for Package Body COMPRASPKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "USER_JAVA"."COMPRASPKG" AS
    FUNCTION GetTotalCompra(id_compra NUMBER) RETURN DECIMAL IS
        v_total DECIMAL(10,2);
    BEGIN
        SELECT total INTO v_total FROM Compras WHERE id_compra = id_compra;
        RETURN v_total;
    END;

    FUNCTION CalcularDescuentoCompra(id_compra NUMBER) RETURN DECIMAL IS
        v_descuento DECIMAL(10,2);
    BEGIN
        SELECT total * 0.10 INTO v_descuento FROM Compras WHERE id_compra = id_compra;
        RETURN v_descuento;
    END;
END ComprasPkg;

/
--------------------------------------------------------
--  DDL for Package Body INVENTARIOPKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "USER_JAVA"."INVENTARIOPKG" AS
    FUNCTION ActualizarStock(id_producto NUMBER, cantidad NUMBER) RETURN VARCHAR2 IS
    BEGIN
        UPDATE Inventario SET cantidad = cantidad + cantidad WHERE id_producto = id_producto;
        RETURN 'Stock actualizado correctamente';
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN 'Producto no encontrado';
    END;

    FUNCTION GetStockMinimoAlerta RETURN SYS_REFCURSOR IS
        v_cursor SYS_REFCURSOR;
    BEGIN
        OPEN v_cursor FOR SELECT id_producto, cantidad FROM Inventario WHERE cantidad < 10;
        RETURN v_cursor;
    END;
END InventarioPkg;

/
--------------------------------------------------------
--  DDL for Package Body PRODUCTOSPKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "USER_JAVA"."PRODUCTOSPKG" AS
    FUNCTION GetPrecioProducto(id_producto NUMBER) RETURN DECIMAL IS
        v_precio DECIMAL(10,2);
    BEGIN
        SELECT precio INTO v_precio FROM Productos WHERE id_producto = id_producto;
        RETURN v_precio;
    END;

    FUNCTION GetStockProducto(id_producto NUMBER) RETURN NUMBER IS
        v_stock NUMBER;
    BEGIN
        SELECT cantidad INTO v_stock FROM Inventario WHERE id_producto = id_producto;
        RETURN v_stock;
    END;

    FUNCTION GetProductoMasVendido RETURN NUMBER IS
        v_producto NUMBER;
    BEGIN
        SELECT id_producto INTO v_producto FROM Detalle_Ventas
        GROUP BY id_producto ORDER BY SUM(cantidad) DESC FETCH FIRST 1 ROW ONLY;
        RETURN v_producto;
    END;

    FUNCTION GetProductoMasComprado RETURN NUMBER IS
        v_producto NUMBER;
    BEGIN
        SELECT id_producto INTO v_producto FROM Detalle_Compras
        GROUP BY id_producto ORDER BY SUM(cantidad) DESC FETCH FIRST 1 ROW ONLY;
        RETURN v_producto;
    END;
END ProductosPkg;

/
--------------------------------------------------------
--  DDL for Package Body PROVEEDORESPKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "USER_JAVA"."PROVEEDORESPKG" AS
    FUNCTION GetNombreProveedor(id_proveedor NUMBER) RETURN VARCHAR2 IS
        v_nombre VARCHAR2(100);
    BEGIN
        SELECT nombre INTO v_nombre FROM Proveedores WHERE id_proveedor = id_proveedor;
        RETURN v_nombre;
    END;

    FUNCTION GetCantidadComprasProveedor(id_proveedor NUMBER) RETURN NUMBER IS
        v_cantidad NUMBER;
    BEGIN
        SELECT COUNT(*) INTO v_cantidad FROM Compras WHERE id_proveedor = id_proveedor;
        RETURN v_cantidad;
    END;
END ProveedoresPkg;

/
--------------------------------------------------------
--  DDL for Package Body REPORTESPKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "USER_JAVA"."REPORTESPKG" AS
    FUNCTION GetPromedioVentas RETURN DECIMAL IS
        v_promedio DECIMAL(10,2);
    BEGIN
        SELECT AVG(total) INTO v_promedio FROM Ventas;
        RETURN v_promedio;
    END;

    FUNCTION GetPromedioCompras RETURN DECIMAL IS
        v_promedio DECIMAL(10,2);
    BEGIN
        SELECT AVG(total) INTO v_promedio FROM Compras;
        RETURN v_promedio;
    END;
END ReportesPkg;

/
--------------------------------------------------------
--  DDL for Package Body USUARIOSPKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "USER_JAVA"."USUARIOSPKG" AS
    FUNCTION ValidarUsuario(username VARCHAR2, password VARCHAR2) RETURN BOOLEAN IS
        v_count NUMBER;
    BEGIN
        SELECT COUNT(*) INTO v_count FROM Usuarios WHERE nombre = username AND contrasena = password;
        RETURN v_count > 0;
    END;

    FUNCTION GetRolUsuario(id_usuario NUMBER) RETURN VARCHAR2 IS
        v_rol VARCHAR2(50);
    BEGIN
        SELECT id_rol INTO v_rol FROM Usuarios WHERE id_usuario = id_usuario;
        RETURN v_rol;
    END;
END UsuariosPkg;

/
--------------------------------------------------------
--  DDL for Package Body VENTASPKG
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE PACKAGE BODY "USER_JAVA"."VENTASPKG" AS
    FUNCTION GetTotalVenta(id_venta NUMBER) RETURN DECIMAL IS
        v_total DECIMAL(10,2);
    BEGIN
        SELECT total INTO v_total FROM Ventas WHERE id_venta = id_venta;
        RETURN v_total;
    END;

    FUNCTION CalcularImpuestoVenta(id_venta NUMBER) RETURN DECIMAL IS
        v_total DECIMAL(10,2);
    BEGIN
        SELECT total * 0.13 INTO v_total FROM Ventas WHERE id_venta = id_venta;
        RETURN v_total;
    END;
END VentasPkg;

/
--------------------------------------------------------
--  DDL for Function CALCULARDESCUENTOCOMPRA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "USER_JAVA"."CALCULARDESCUENTOCOMPRA" (p_monto_compra IN NUMBER) RETURN NUMBER IS
    v_descuento NUMBER;
BEGIN
    v_descuento := p_monto_compra * 0.10;

    RETURN v_descuento;
END;

/
--------------------------------------------------------
--  DDL for Function CALCULARIMPUESTOVENTA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "USER_JAVA"."CALCULARIMPUESTOVENTA" (p_monto_venta IN NUMBER) RETURN NUMBER IS
    v_impuesto NUMBER;
BEGIN
    v_impuesto := p_monto_venta * 0.13;

    RETURN v_impuesto;
END;

/
--------------------------------------------------------
--  DDL for Function FN_CAN_ADD_PRODUCT
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "USER_JAVA"."FN_CAN_ADD_PRODUCT" 
RETURN BOOLEAN
IS
    v_count NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM "USER_JAVA"."INVENTARIO";

    IF v_count > 0 THEN
        RETURN TRUE; -- Hay registros en inventario, se puede agregar producto
    ELSE
        RETURN FALSE; -- No hay registros en inventario, no se puede agregar producto
    END IF;
END;

/
--------------------------------------------------------
--  DDL for Function GETNOMBRECATEGORIA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "USER_JAVA"."GETNOMBRECATEGORIA" (p_categoria_id IN NUMBER) RETURN VARCHAR2 IS
    v_nombre_categoria VARCHAR2(100);
BEGIN
    SELECT nombre
    INTO v_nombre_categoria
    FROM categorias
    WHERE id_categoria = p_categoria_id;

    RETURN v_nombre_categoria;
END;

/
--------------------------------------------------------
--  DDL for Function GETNOMBRECLIENTE
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "USER_JAVA"."GETNOMBRECLIENTE" (p_cliente_id IN NUMBER) RETURN VARCHAR2 IS
    v_nombre_cliente VARCHAR2(100);
BEGIN
    SELECT nombre
    INTO v_nombre_cliente
    FROM clientes
    WHERE id_cliente = p_cliente_id;

    RETURN v_nombre_cliente;
END;

/
--------------------------------------------------------
--  DDL for Function GETNOMBREPROVEEDOR
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "USER_JAVA"."GETNOMBREPROVEEDOR" (p_proveedor_id IN NUMBER) RETURN VARCHAR2 IS
    v_nombre_proveedor VARCHAR2(100);
BEGIN
    SELECT nombre
    INTO v_nombre_proveedor
    FROM proveedores
    WHERE id_proveedor = p_proveedor_id;

    RETURN v_nombre_proveedor;
END;

/
--------------------------------------------------------
--  DDL for Function GETPRECIOPRODUCTO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "USER_JAVA"."GETPRECIOPRODUCTO" (p_producto_id IN NUMBER) RETURN NUMBER IS
    v_precio NUMBER;
BEGIN
    SELECT precio
    INTO v_precio
    FROM USER_JAVA.PRODUCTOS
    WHERE id_producto = p_producto_id;

    RETURN v_precio;
END;
/

/*Funcion para obtener el nombre de la categoria*/
CREATE OR REPLACE FUNCTION "USER_JAVA"."GetNombreCategoria"(p_categoria_id IN NUMBER) RETURN VARCHAR2 IS
    v_nombre_categoria VARCHAR2(100);
BEGIN
    SELECT nombre
    INTO v_nombre_categoria
    FROM USER_JAVA.CATEGORIAS
    WHERE id_categoria = p_categoria_id;

    RETURN v_nombre_categoria;
END;
/

/*Funcion para obtener el nombre del cliente*/
CREATE OR REPLACE FUNCTION "USER_JAVA"."GetNombreCliente"(p_cliente_id IN NUMBER) RETURN VARCHAR2 IS
    v_nombre_cliente VARCHAR2(100);
BEGIN
    SELECT nombre
    INTO v_nombre_cliente
    FROM clientes
    WHERE id_cliente = p_cliente_id;

    RETURN v_nombre_cliente;
END;

/*Funcion para obtener el nombre del proveedor*/
CREATE OR REPLACE FUNCTION "USER_JAVA"."GetNombreProveedor"(p_proveedor_id IN NUMBER) RETURN VARCHAR2 IS
    v_nombre_proveedor VARCHAR2(100);
BEGIN
    SELECT nombre
    INTO v_nombre_proveedor
    FROM proveedores
    WHERE id_proveedor = p_proveedor_id;

    RETURN v_nombre_proveedor;
END;
/
/*Funcion para obtener el total de ventas de un producto*/
CREATE OR REPLACE FUNCTION "USER_JAVA"."GetTotalVenta"(p_producto_id IN NUMBER) RETURN NUMBER IS
    v_total_venta NUMBER;
BEGIN
    SELECT SUM(dv.cantidad * dv.precio_unitario)
    INTO v_total_venta
    FROM detalle_ventas dv
    JOIN ventas v ON dv.id_venta = v.id_venta
    WHERE dv.id_producto = p_producto_id;

    RETURN v_total_venta;
END;
/
/*Funcion para obtener el total de compras de un producto*/
CREATE OR REPLACE FUNCTION "USER_JAVA"."GetTotalCompra"(p_producto_id IN NUMBER) RETURN NUMBER IS
    v_total_compra NUMBER;
BEGIN
    SELECT SUM(dc.cantidad * dc.precio_unitario)
    INTO v_total_compra
    FROM detalle_compras dc
    JOIN compras c ON dc.id_compra = c.id_compra
    WHERE dc.id_producto = p_producto_id;

    RETURN v_total_compra;
END;
/
/*Funcion para calcular el impuesto de venta IVA*/
CREATE OR REPLACE FUNCTION "USER_JAVA"."CalcularImpuestoVenta"(p_monto_venta IN NUMBER) RETURN NUMBER IS
    v_impuesto NUMBER;
BEGIN
    v_impuesto := p_monto_venta * 0.13;

    RETURN v_impuesto;
END;
/
/*Funcion para calcular el descuento de la compra (10%)*/
CREATE OR REPLACE FUNCTION "USER_JAVA"."CalcularDescuentoCompra"(p_monto_compra IN NUMBER) RETURN NUMBER IS
    v_descuento NUMBER;
BEGIN
    v_descuento := p_monto_compra * 0.10;

    RETURN v_descuento;
END;
/
/*Funcion para obtener la cantidad de stock de un producto*/
CREATE OR REPLACE FUNCTION "USER_JAVA"."GetStockProducto"(p_producto_id IN NUMBER) RETURN NUMBER IS
    v_stock NUMBER;
BEGIN
    SELECT stock
    INTO v_stock
    FROM inventario
    WHERE id_producto = p_producto_id;

    RETURN v_stock;
END;
/
/*Funcion para obtener la cantidad de ventas que se realizaron por cliente*/
CREATE OR REPLACE FUNCTION "USER_JAVA"."GetCantidadVentasCliente"(p_cliente_id IN NUMBER) RETURN NUMBER IS
    v_cantidad_ventas NUMBER;
BEGIN
    SELECT SUM(dv.cantidad)
    INTO v_cantidad_ventas
    FROM detalle_ventas dv
    JOIN ventas v ON dv.id_venta = v.id_venta
    WHERE v.id_cliente = p_cliente_id;

    RETURN v_cantidad_ventas;
END;
/
/*Funcion para obtener la cantidad total de compras realizadas por un proveedor*/
CREATE OR REPLACE FUNCTION "USER_JAVA"."GetCantidadComprasProveedor"(p_proveedor_id IN NUMBER) RETURN NUMBER IS
    v_cantidad_compras NUMBER;
BEGIN
    SELECT SUM(dc.cantidad)
    INTO v_cantidad_compras
    FROM detalle_compras dc
    JOIN compras c ON dc.id_compra = c.id_compra
    WHERE c.id_proveedor = p_proveedor_id;

    RETURN v_cantidad_compras;
END;
/
/*Funcion para obtener el promedio de las ventas*/
CREATE OR REPLACE FUNCTION "USER_JAVA"."GetPromedioVentas"(p_producto_id IN NUMBER) RETURN NUMBER IS
    v_promedio_ventas NUMBER;
BEGIN
    SELECT AVG(dv.cantidad * dv.precio_unitario)
    INTO v_promedio_ventas
    FROM detalle_ventas dv
    JOIN ventas v ON dv.id_venta = v.id_venta
    WHERE dv.id_producto = p_producto_id;

    RETURN v_promedio_ventas;
END;
/
/*Funcion para obtener el promedio de compras de un producto*/
CREATE OR REPLACE FUNCTION "USER_JAVA"."GetPromedioCompras"(p_producto_id IN NUMBER) RETURN NUMBER IS
    v_promedio_compras NUMBER;
BEGIN
    SELECT AVG(dc.cantidad * dc.precio_unitario)
    INTO v_promedio_compras
    FROM user_java.detalle_compras dc
    JOIN compras c ON dc.id_compra = c.id_compra
    WHERE dc.id_producto = p_producto_id;

    RETURN v_promedio_compras;
END;
/
/*Funcion para obtener el producto mas vendido*/
CREATE OR REPLACE FUNCTION "USER_JAVA"."GetProductoMasVendido" RETURN NUMBER IS
    v_producto_id NUMBER;
BEGIN
    SELECT id_producto
    INTO v_producto_id
    FROM (
        SELECT id_producto, SUM(cantidad) AS total_vendido
        FROM user_java.detalle_ventas
        GROUP BY id_producto
        ORDER BY total_vendido DESC
    ) WHERE ROWNUM = 1;

    RETURN v_producto_id;
END;
/
/*Funcion para obtener el producto mas comprado*/
CREATE OR REPLACE FUNCTION "USER_JAVA"."GetProductoMasComprado" RETURN NUMBER IS
    v_producto_id NUMBER;
BEGIN
    SELECT id_producto
    INTO v_producto_id
    FROM (
        SELECT id_producto, SUM(cantidad) AS total_comprado
        FROM user_java.detalle_compras
        GROUP BY id_producto
        ORDER BY total_comprado DESC
    ) WHERE ROWNUM = 1;

    RETURN v_producto_id;
END;
/
/*Paquetes*/
/*ProductosPkg*/
CREATE OR REPLACE PACKAGE ProductosPkg AS
    FUNCTION GetPrecioProducto(id_producto NUMBER) RETURN DECIMAL;
    FUNCTION GetStockProducto(id_producto NUMBER) RETURN NUMBER;
    FUNCTION GetProductoMasVendido RETURN NUMBER;
    FUNCTION GetProductoMasComprado RETURN NUMBER;
END ProductosPkg;

/
--------------------------------------------------------
--  DDL for Function GETSTOCKPRODUCTO
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "USER_JAVA"."GETSTOCKPRODUCTO" (p_producto_id IN NUMBER) RETURN NUMBER IS
    v_stock NUMBER;
BEGIN
    SELECT stock
    INTO v_stock
    FROM USER_JAVA.inventario
    WHERE id_producto = p_producto_id;

    RETURN v_stock;
END;

/
--------------------------------------------------------
--  DDL for Function GETTOTALVENTA
--------------------------------------------------------

  CREATE OR REPLACE NONEDITIONABLE FUNCTION "USER_JAVA"."GETTOTALVENTA" (p_producto_id IN NUMBER) RETURN NUMBER IS
    v_total_venta NUMBER;
BEGIN
    SELECT SUM(dv.cantidad * dv.precio_unitario)
    INTO v_total_venta
    FROM detalle_ventas dv
    JOIN ventas v ON dv.id_venta = v.id_venta
    WHERE dv.id_producto = p_producto_id;

    RETURN v_total_venta;
END;

/
--------------------------------------------------------
--  Constraints for Table ALERTAS
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."ALERTAS" MODIFY ("ID_ALERTA" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table AUDITORIA_DETALLE_COMPRAS
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."AUDITORIA_DETALLE_COMPRAS" ADD PRIMARY KEY ("ID_AUDITORIA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CALIDAD
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."CALIDAD" MODIFY ("ID_CALIDAD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CATEGORIAS
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."CATEGORIAS" MODIFY ("ID_CATEGORIA" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table CLIENTES
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."CLIENTES" MODIFY ("ID_CLIENTE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table COMPRAS
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."COMPRAS" MODIFY ("ID_PROVEEDOR" NOT NULL ENABLE);
  ALTER TABLE "USER_JAVA"."COMPRAS" MODIFY ("FECHA_COMPRA" NOT NULL ENABLE);
  ALTER TABLE "USER_JAVA"."COMPRAS" MODIFY ("TOTAL" NOT NULL ENABLE);
  ALTER TABLE "USER_JAVA"."COMPRAS" MODIFY ("ID_ESTADO" NOT NULL ENABLE);
  ALTER TABLE "USER_JAVA"."COMPRAS" ADD PRIMARY KEY ("ID_COMPRA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table DETALLE_COMPRAS
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."DETALLE_COMPRAS" MODIFY ("ID_COMPRA" NOT NULL ENABLE);
  ALTER TABLE "USER_JAVA"."DETALLE_COMPRAS" MODIFY ("ID_PRODUCTO" NOT NULL ENABLE);
  ALTER TABLE "USER_JAVA"."DETALLE_COMPRAS" MODIFY ("CANTIDAD" NOT NULL ENABLE);
  ALTER TABLE "USER_JAVA"."DETALLE_COMPRAS" MODIFY ("PRECIO_UNITARIO" NOT NULL ENABLE);
  ALTER TABLE "USER_JAVA"."DETALLE_COMPRAS" ADD PRIMARY KEY ("ID_DETALLE_COMPRA")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "USER_JAVA"."DETALLE_COMPRAS" ADD CONSTRAINT "CHK_CANTIDAD_POSITIVA" CHECK (CANTIDAD > 0) ENABLE;
  ALTER TABLE "USER_JAVA"."DETALLE_COMPRAS" ADD CONSTRAINT "CHK_PRECIO_POSITIVO" CHECK (PRECIO_UNITARIO > 0) ENABLE;
  ALTER TABLE "USER_JAVA"."DETALLE_COMPRAS" ADD CONSTRAINT "UQ_DETALLE_COMPRA_PRODUCTO" UNIQUE ("ID_COMPRA", "ID_PRODUCTO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table DETALLE_VENTAS
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."DETALLE_VENTAS" MODIFY ("ID_DETALLE_VENTA" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table DEVOLUCIONES
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."DEVOLUCIONES" MODIFY ("ID_DEVOLUCION" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ESTADOS_ORDEN
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."ESTADOS_ORDEN" MODIFY ("NOMBRE_ESTADO" NOT NULL ENABLE);
  ALTER TABLE "USER_JAVA"."ESTADOS_ORDEN" ADD PRIMARY KEY ("ID_ESTADO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "USER_JAVA"."ESTADOS_ORDEN" ADD UNIQUE ("NOMBRE_ESTADO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ESTADOS_ORDENES
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."ESTADOS_ORDENES" MODIFY ("NOMBRE_ESTADO" NOT NULL ENABLE);
  ALTER TABLE "USER_JAVA"."ESTADOS_ORDENES" ADD PRIMARY KEY ("ID_ESTADO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "USER_JAVA"."ESTADOS_ORDENES" ADD UNIQUE ("NOMBRE_ESTADO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table GASTOS
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."GASTOS" MODIFY ("ID_GASTO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table HISTORIAL_PRECIOS
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."HISTORIAL_PRECIOS" MODIFY ("ID_HISTORIAL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table HISTORIAL_STOCK
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."HISTORIAL_STOCK" MODIFY ("ID_HISTORIAL" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table INVENTARIO
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."INVENTARIO" MODIFY ("ID_INVENTARIO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table LOGS
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."LOGS" MODIFY ("ID_LOG" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PAGOS
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."PAGOS" MODIFY ("ID_PAGO" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PRODUCTOS
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."PRODUCTOS" MODIFY ("ID_PRODUCTO" NOT NULL ENABLE);
  ALTER TABLE "USER_JAVA"."PRODUCTOS" MODIFY ("ID_PROVEEDOR" NOT NULL ENABLE);
  ALTER TABLE "USER_JAVA"."PRODUCTOS" MODIFY ("ID_CATEGORIA" NOT NULL ENABLE);
  ALTER TABLE "USER_JAVA"."PRODUCTOS" MODIFY ("ID_UNIDAD" NOT NULL ENABLE);
  ALTER TABLE "USER_JAVA"."PRODUCTOS" ADD CONSTRAINT "PK_PRODUCTOS" PRIMARY KEY ("ID_PRODUCTO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PROMOCIONES
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."PROMOCIONES" MODIFY ("ID_PROMOCION" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PROVEEDORES
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."PROVEEDORES" MODIFY ("ID_PROVEEDOR" NOT NULL ENABLE);
  ALTER TABLE "USER_JAVA"."PROVEEDORES" ADD CONSTRAINT "PK_PROVEEDORES" PRIMARY KEY ("ID_PROVEEDOR")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table REPORTES
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."REPORTES" MODIFY ("ID_REPORTE" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ROLES
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."ROLES" MODIFY ("ID_ROL" NOT NULL ENABLE);
  ALTER TABLE "USER_JAVA"."ROLES" ADD CONSTRAINT "ROLES_PK" PRIMARY KEY ("ID_ROL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Constraints for Table UNIDADES
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."UNIDADES" MODIFY ("ID_UNIDAD" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table USUARIOS
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."USUARIOS" MODIFY ("ID_USUARIO" NOT NULL ENABLE);
  ALTER TABLE "USER_JAVA"."USUARIOS" MODIFY ("CORREO" NOT NULL ENABLE);
  ALTER TABLE "USER_JAVA"."USUARIOS" MODIFY ("CONTRASENA" NOT NULL ENABLE);
  ALTER TABLE "USER_JAVA"."USUARIOS" MODIFY ("ID_ROL" NOT NULL ENABLE);
  ALTER TABLE "USER_JAVA"."USUARIOS" ADD CONSTRAINT "USUARIOS_PK" PRIMARY KEY ("ID_USUARIO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "USER_JAVA"."USUARIOS" ADD CONSTRAINT "USUARIOS_CORREO_UK" UNIQUE ("CORREO")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "USER_JAVA"."USUARIOS" MODIFY ("FECHA_CREACION" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table VENTAS
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."VENTAS" MODIFY ("ID_VENTA" NOT NULL ENABLE);
--------------------------------------------------------
--  Ref Constraints for Table COMPRAS
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."COMPRAS" ADD CONSTRAINT "FK_COMPRAS_PROVEEDOR" FOREIGN KEY ("ID_PROVEEDOR")
	  REFERENCES "USER_JAVA"."PROVEEDORES" ("ID_PROVEEDOR") ENABLE;
  ALTER TABLE "USER_JAVA"."COMPRAS" ADD CONSTRAINT "FK_COMPRAS_ESTADO" FOREIGN KEY ("ID_ESTADO")
	  REFERENCES "USER_JAVA"."ESTADOS_ORDENES" ("ID_ESTADO") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table DETALLE_COMPRAS
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."DETALLE_COMPRAS" ADD CONSTRAINT "FK_DETALLE_COMPRA" FOREIGN KEY ("ID_COMPRA")
	  REFERENCES "USER_JAVA"."COMPRAS" ("ID_COMPRA") ENABLE;
  ALTER TABLE "USER_JAVA"."DETALLE_COMPRAS" ADD CONSTRAINT "FK_DETALLE_PRODUCTO" FOREIGN KEY ("ID_PRODUCTO")
	  REFERENCES "USER_JAVA"."PRODUCTOS" ("ID_PRODUCTO") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USUARIOS
--------------------------------------------------------

  ALTER TABLE "USER_JAVA"."USUARIOS" ADD CONSTRAINT "USUARIOS_ROL_FK" FOREIGN KEY ("ID_ROL")
	  REFERENCES "USER_JAVA"."ROLES" ("ID_ROL") ENABLE;
